
Portable Motorola 6800 Assembler - V1.0.0 (2014-04-15)

                            ; MIKBUG
                            ;
                            ;
                            
        00008007          = PIASB   .EQU    $8007
        00008006          = PIADB   .EQU    $8006
        00008005          = PIAS    .EQU    $8005
        00008004          = PIAD    .EQU    $8004
                            
                                    .ORG    $E000
                                    
                            ; I/O Interrupt Sequence
                            
00E000  FEA000            : IO      LDX     IOV
00E003  6E00              :         JMP     X
                                            
                            ; NMI Sequence
                            
00E005  FEA006            : POWDWN  LDX     NIO
00E008  6E00              :         JMP     X
                            
        0000E00A          = LOAD    .EQU    *
00E00A  863C              :         LDA A   #$3C
00E00C  B78007            :         STA A   PIASB           ; Reader relay on
00E00F  8611              :         LDA A   #@21
00E011  8D62              :         BSR     OUTCH           ; Output char
                                    
00E013  8D63              : LOAD3   BSR     INCH
00E015  8153              :         CMP A   #'S'
00E017  26FA              :         BNE     LOAD3           ; 1st char not (S)
00E019  8D5D              :         BSR     INCH            ; Read char
00E01B  8139              :         CMP A   #'9'
00E01D  2722              :         BEQ     LOAD21
00E01F  8131              :         CMP A   #'1'
00E021  26F0              :         BNE     LOAD3           ; 2nd char not (1)
00E023  7FA00A            :         CLR     CKSM            ; Zero checksum
00E026  8D2D              :         BSR     BYTE            ; Read byte
00E028  8002              :         SUB A   #2
00E02A  B7A00B            :         STA A   BYTECT          ; Byte count
                            ; Build Address
00E02D  8D18              :         BSR     BADDR
                            ; Store Data
00E02F  8D24              : LOAD11  BSR     BYTE
00E031  7AA00B            :         DEC     BYTECT
00E034  2705              :         BEQ     LOAD15          ; Zero byte count
00E036  A700              :         STA A   X               ; Store data
00E038  08                :         INX
00E039  20F4              :         BRA     LOAD11
                                    
00E03B  7CA00A            : LOAD15  INC     CKSM
00E03E  27D3              :         BEQ     LOAD3
00E040  863F              : LOAD19  LDA A   #'?'            ; Print question mark
00E042  8D31              :         BSR     OUTCH
        0000E044          = LOAD21  .EQU    *

Portable Motorola 6800 Assembler - V1.0.0 (2014-04-15)

00E044  7EE0E1            :         JMP     CONTRL
                                    
                            ; Build Address
00E047  8D0C              : BADDR   BSR     BYTE            ; Read 2 frames
00E049  B7A00C            :         STA A   XHI
00E04C  8D07              :         BSR     BYTE
00E04E  B7A00D            :         STA A   XLOW
00E051  FEA00C            :         LDX     XHI             ; (X) Address we built
00E054  39                :         RTS
                                    
                            ; Inout Byte (Two Frames)
00E055  8D53              : BYTE    BSR     INHEX           ; Get hex char
00E057  48                :         ASL A
00E058  48                :         ASL A
00E059  48                :         ASL A
00E05A  48                :         ASL A
00E05B  16                :         TAB
00E05C  8D4C              :         BSR     INHEX
00E05E  1B                :         ABA
00E05F  16                :         TAB
00E060  FBA00A            :         ADD B   CKSM
00E063  F7A00A            :         STA B   CKSM
00E066  39                :         RTS
                                    
00E067  44                : OUTHL   LSR A                   ; Out hex left BDC digit
00E068  44                :         LSR A
00E069  44                :         LSR A
00E06A  44                :         LSR A
                                    
00E06B  840F              : OUTHR   AND A   #$F             ; Out hex right BCD digit
00E06D  8B30              :         ADD A   #$30
00E06F  8139              :         CMP A   #$39
00E071  2302              :         BLS     OUTCH
00E073  8B07              :         ADD A   #$7
                            
                            ; Output one char
00E075  7EE0E1            : OUTCH   JMP     OUTEEE
00E078  7EE0E1            : INCH    JMP     INEEE
                            
                            ; Print data pointed at by X-reg
00E07B  8DF8              : PDATA2  BSR     OUTCH
00E07D  08                :         INX
00E07E  A600              : PDATA1  LDA A   X
00E080  8104              :         CMP A   #4
00E082  26F7              :         BNE     PDATA2
00E084  39                :         RTS                     ; Stop on EOT
                                    
                            ; Change Memory (M AAAA DD NN)
00E085  8DC0              : CHANGE  BSR     BADDR           ; Build address
00E087  CEE0E1            : CHA51   LDX     #MCL
00E08A  8DF2              :         BSR     PDATA1          ; C/R L/F
00E08C  CEA00C            :         LDX     #XHI
00E08F  8D37              :         BSR     OUT4HS          ; Print address
00E091  FEA00C            :         LDX     XHI

Portable Motorola 6800 Assembler - V1.0.0 (2014-04-15)

00E094  8D34              :         BSR     OUT2HS          ; Print data (old)
00E096  FFA00C            :         STX     XHI             ; Save data address
00E099  8DDD              :         BSR     INCH            ; Input one char
00E09B  8120              :         CMP A   #$20
00E09D  26E8              :         BNE     CHA51           ; Not space
00E09F  8DB4              :         BSR     BYTE            ; Input new data
00E0A1  09                :         DEX
00E0A2  A700              :         STA A   X               ; Change memory
00E0A4  A100              :         CMP A   X
00E0A6  27DF              :         BEQ     CHA51           ; Did change
00E0A8  2096              :         BRA     LOAD19          ; Not changed
                                    
                            ; Input Hex Char
00E0AA  8DCC              : INHEX   BSR     INCH
00E0AC  8030              :         SUB A   #$30
00E0AE  2B31              :         BMI     C1              ; Not hex
00E0B0  8109              :         CMP A   #$09
00E0B2  2F0A              :         BLE     IN1HG
00E0B4  8111              :         CMP A   #$11
00E0B6  2B29              :         BMI     C1              ; Not hex
00E0B8  8116              :         CMP A   #$16
00E0BA  2E25              :         BGT     C1              ; Not hex
00E0BC  8007              :         SUB A   #7
00E0BE  39                : IN1HG   RTS
                            
00E0BF  A600              : OUT2H   LDA A   0,X             ; Output 2 hex char
00E0C1  8DA4              : OUT2HA  BSR     OUTHL           ; Out left hex char
00E0C3  A600              :         LDA A   0,X
00E0C5  08                :         INX
00E0C6  20A3              :         BRA     OUTHR           ; Output right hex char and r
                                    
00E0C8  8DF5              : OUT4HS  BSR     OUT2H           ; Output 4 hex char + space
00E0CA  8DF3              : OUT2HS  BSR     OUT2H           ; Output 2 hex char + space
00E0CC  8620              : OUTS    LDA A   #$20            ; Space
00E0CE  20A5              :         BRA     OUTCH           ; (BSR & RTS)
                                    
                            ; Enter Power on sequence
        0000E0D0          = START   .EQU    *
00E0D0  8EA042            :         LDS     #STACK
00E0D3  BFA008            :         STS     SP              ; Inz target's stack pointer
                            ; inz PIA
00E0D6  CE8004            :         LDX     #PIAD
00E0D9  6C00              :         INC     0,X
00E0DB  8607              :         LDA A   #$7
00E0DD  A701              :         STA A   1,X
00E0DF  6C00              :         INC     0,X
                                    STA     2,X
                            CONTRL
                            
                            
                            
                            MCL
                            C1
                            

Portable Motorola 6800 Assembler - V1.0.0 (2014-04-15)

                            
                            OUTEEE
                            INEEE
                            
                                    .ORG    $A000
                                    
00A000  0000              : IOV     .SPACE  2               ; IO Interrupt Pointer
00A002  0000              : BEGA    .SPACE  2               ; Beginning addr print/punch
00A004  0000              : ENDA    .SPACE  2               ; Ending addr print/punch
00A006  0000              : NIO     .SPACE  2               ; NMI interrupt pointer
00A008  00                : SP      .SPACE  1
00A009  00                :         .SPACE  1
00A00A  00                : CKSM    .SPACE  1
00A00B  00                : BYTECT  .SPACE  1
00A00C  00                : XHI     .SPACE  1
00A00D  00                : XLOW    .SPACE  1
00A00E  00                : TEMP    .SPACE  1               ; Temp /
00A00F  0000              : TW      .SPACE  2               ; Temp
00A011  00                : MCONT   .SPACE  1
00A012  0000              : XTEMP   .SPACE  2
00A014  0000000000000000> :         .SPACE  46
00A042  00                : STACK   .SPACE  1               ; Stack pointer
                            
                            
                            
                            
                                    .END


Portable Motorola 6800 Assembler - V1.0.0 (2014-04-15)

Symbol Table

BADDR                            0000E047
BEGA                             0000A002
BYTE                             0000E055
BYTECT                           0000A00B
C1                               0000E0E1
CHA51                            0000E087
CHANGE                           0000E085
CKSM                             0000A00A
CONTRL                           0000E0E1
ENDA                             0000A004
IN1HG                            0000E0BE
INCH                             0000E078
INEEE                            0000E0E1
INHEX                            0000E0AA
IO                               0000E000
IOV                              0000A000
LOAD                             0000E008
LOAD11                           0000E02F
LOAD15                           0000E03B
LOAD19                           0000E040
LOAD21                           0000E041
LOAD3                            0000E013
MCL                              0000E0E1
MCONT                            0000A011
NIO                              0000A006
OUT2H                            0000E0BF
OUT2HA                           0000E0C1
OUT2HS                           0000E0CA
OUT4HS                           0000E0C8
OUTCH                            0000E075
OUTEEE                           0000E0E1
OUTHL                            0000E067
OUTHR                            0000E06B
OUTS                             0000E0CC
PDATA1                           0000E07E
PDATA2                           0000E07B
PIAD                             00008004
PIADB                            00008006
PIAS                             00008005
PIASB                            00008007
POWDWN                           0000E005
SP                               0000A008
STACK                            0000A042
START                            0000E0C6
TEMP                             0000A00E
TW                               0000A00F
XHI                              0000A00C
XLOW                             0000A00D
XTEMP                            0000A012
