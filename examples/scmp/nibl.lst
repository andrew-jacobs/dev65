
Portable National Semiconductor SC/MP Assembler [15.02]

                            ;-----------------------------------------------------------------------------
                            ;  NIBL.ASM - Tiny BASIC for the National Semiconductor SC/MP microprocessor
                            ;                    (NIBL-P, release date 12/17/76)
                            ;
                            ; This file has been prepared via OCR and text editor from the original
                            ; assembly listing; then re-assembled and rigorously checked for errors.
                            ;
                            ;The following differences exist from the original listing:
                            ;  - Many original local labels (mostly for short jumps) have been given
                            ;    new names to insure global uniqueness.
                            ;  - Macros have been modified (or created) to allow compatibility with a
                            ;    modern, generic, macro-assembler.
                            ;  - After being passed through the OCR process, neatness of the original
                            ;    text has suffered some cosmetic inconsistency.
                            ;
                            ;Of further note:
                            ;  - The macro-assembler used here is a free tool, "AS", by Alfred Arnold:
                            ;             http://john.ccac.rwth-aachen.de:8000/as/
                            ;  - The cryptic syntax "./256" used as the operand of the instruction at
                            ;    address 0087 suggests that there may have been "hooks" incorporated
                            ;    for relocation of the NIBL interpreter code. An assembled operand value
                            ;    of zero has been retained as in the original.
                            ;  - On my original hardcopy listing, hand written notations indicate that the
                            ;    "OR HI(P2)" instructions at addresses 05D3 and 0936 were later changed
                            ;    to "ANI 01". As I recall, this was a minor bug fix that may have been
                            ;    published in a National Semiconductor newsletter or in an issue of
                            ;    Dr. Dobb's Journal.
                            ;
                            ; A full assembly listing of this source file is also appended below.
                            ; Enjoy!
                            ;
                            ; Roger Marin, January 2008
                            ; Portland, Oregon, USA.
                            ; ramarin(AT)teleport.com
                            ;-----------------------------------------------------------------------------
                            
        00000000          = P0      .EQU    0
        00000001          = P1      .EQU    1
        00000002          = P2      .EQU    2
        00000003          = P3      .EQU    3
                            
        00000001          = EM_SCMP .EQU    1
                            
                            JS      .MACRO  PTR,VAL
                                    LDI     HI((VAL)-1)
                                    XPAH    PTR
                                    LDI     LO((VAL)-1)
                                    XPAL    PTR
                                    XPPC    PTR
                                    .ENDM
                            
                            LDPI    .MACRO  PTR,VAL
                                    LDI     HI(VAL)
                                    XPAH    PTR

Portable National Semiconductor SC/MP Assembler [15.02]

                                    LDI     LO(VAL)
                                    XPAL    PTR
                                    .ENDM
                            
                            ;*****************************************************
                            ;*       WE ARE TIED DOWN TO A LANGUAGE WHICH        *
                            ;*       MAKES  UP IN OBSCURITY WHAT IT LACKS        *
                            ;*       IN  STYLE.                                  *
                            ;*                     - TOM STOPPARD                *
                            ;*                                                   *
                            ;*****************************************************
                            
        00000020          = TSTBIT  =       X'20            ;I. L. INSTRUCTION FLAGS
        00000040          = JMPBIT  =       X'40
        00000080          = CALBIT  =       X'80
                            
        FFFFFF80          = EREG    =       -128            ;THE EXTENSION REGISTER
                            
                            ; DISPLACEMENTS FOR RAM VARIABLES USED BY INTERPRETER
                            
        FFFFFFFF          = DOPTR   =       -1              ;DO-STACK POINTER
        FFFFFFFE          = FORPTR  =       -2              ;FOR-STACK POINTER
        FFFFFFFD          = LSTK    =       -3              ;ARITHMETIC STACK POINTER
        FFFFFFFC          = SBRPTR  =       -4              ;GOSUB STACK POINTER
        FFFFFFFB          = PCLOW   =       -5              ;I. L. PROGRAM COUNTER
        FFFFFFFA          = PCHIGH  =       -6
        FFFFFFF9          = PCSTK   =       -7              ;I. L. CALL STACK POINTER
        FFFFFFF8          = LOLINE  =       -8              ;CURRENT LINE NUMBER
        FFFFFFF7          = HILINE  =       -9
        FFFFFFF6          = PAGE    =       -10             ;VALUE OF CURRENT PAGE
        FFFFFFF5          = LISTNG  =       -11             ;LISTING FLAG
        FFFFFFF4          = RUNMOD  =       -12             ;RUN/EDIT FLAG
        FFFFFFF3          = LABLLO  =       -13
        FFFFFFF2          = LABLHI  =       -14
        FFFFFFF1          = P1L0W   =       -15             ;SPACE TO SAVE CURSOR
        FFFFFFF0          = P1HIGH  =       -16
        FFFFFFEF          = LOW     =       -17
        FFFFFFEE          = HIGH    =       -18
        FFFFFFED          = FAILLO  =       -19
        FFFFFFEC          = FAILHI  =       -20
        FFFFFFEB          = NUM     =       -21
        FFFFFFEA          = TEMP    =       -22
        FFFFFFE9          = TEMP2   =       -23
        FFFFFFE8          = TEMP3   =       -24
        FFFFFFE7          = CHRNUM  =       -25
        FFFFFFE6          = RNDF    =       -26
        FFFFFFE5          = RNDX    =       -27             ; SEEDS FOR RANDOM NUMBER
        FFFFFFE4          = RNDY    =       -28
                            
                            ; ALLOCATION  OF RAM FOR NIBL VARIABLES, STACKS,
                            ; AND LINE BUFFER
                            
        0000101C          = VARS    =  X'1000 +28           ;NIBL VARIABLES A-Z
        00001050          = AESTK:  =  VARS   +52           ;ARITHMETIC STACK

Portable National Semiconductor SC/MP Assembler [15.02]

        0000106A          = SBRSTK: =  AESTK  +26           ;G0SUB STACK
        0000107A          = DOSTAK: =  SBRSTK +16           ;DO/UNTIL  STACK
        0000108A          = FORSTK: =  DOSTAK +16           ;FOR/NEXT  STACK
        000010A6          = PCSTAK: =  FORSTK +28           ;I.L. CALL STACK
        000010D6          = LBUF:   =  PCSTAK +48           ;LINE BUFFER
        00001120          = PGM:    =  LBUF   +74           ;USER'S PROGRAM
                            
                            
                            ;*************************************
                            ;*      INITIALIZATION OF NIBL       *
                            ;*************************************
                            
                                    .CODE
                                    .ORG    X'0000
                            
000000  08                :         NOP
                                    LDPI    P2,VARS         ; POINT P2  AT VARIABLES
000001  C410              +         LDI     HI(VARS)
000003  36                +         XPAH    P2
000004  C41C              +         LDI     LO(VARS)
000006  32                +         XPAL    P2
                                    LDPI    P1,PGM          ; POINT PI  AT PAGE ONE PROGRAM
000007  C411              +         LDI     HI(PGM)
000009  35                +         XPAH    P1
00000A  C420              +         LDI     LO(PGM)
00000C  31                +         XPAL    P1
00000D  C4FF              :         LDI     -1              ; STORE -1  AT START OF PROGRAM
00000F  C900              :         ST      0(P1)
000011  C901              :         ST      1(P1)
000013  C40D              :         LDI     X'0D            ; ALSO  STORE  A DUMMY
000015  C9FF              :         ST      -1(P1)          ; CARRIAGE RETURN
000017  C402              :         LDI     2               ; POINT P2  AT PAGE 2,
000019  CAF6              :         ST      PAGE(P2)        ; INITIALLY SET PAGE TO  2
00001B  31                :         XPAL    P1
00001C  C420              :         LDI     X'20
00001E  35                :         XPAH    P1
00001F  B902              :         DLD     2(P1)           ; CHECK IF  THERE IS REALLY
000021  01                :         XAE                     ; A PROGRAM IN PAGE 2:
000022  C180              :         LD      EREG(P1)        ; IF FIRST LINE LENGTH
000024  E40D              :         XRI     X'0D            ; POINTS TO CARR. RETURN
000026  9802              :         JZ      L000            ; AT END OF LINE
000028  BAF6              :         DLD     PAGE(P2)        ;IF NOT, PAGE = 1
00002A  C420              : L000:   LDI     X'20
00002C  35                : LOOP1:  XPAH    P1
00002D  C4FF              :         LDI     -1              ; STORE -1  IN 2 CONSECUTIVE
00002F  C900              :         ST      (P1)            ; LOCATIONS AT START OF PAGE
000031  C901              :         ST      1(P1)
000033  C40D              :         LDI     X'0D            ; ALSO  PUT  A  DUMMY END-OF-LINE
000035  C9FF              :         ST      -1(P1)          ; JUST BEFORE TEXT
000037  35                :         XPAH    P1              ; UPDATE P1 TO POINT TO
000038  02                :         CCL                     ; NEXT PAGE (UNTIL PAGE=8)
000039  F410              :         ADI     X'10            ; REPEAT INITIALIZATION
00003B  E480              :         XRI     X'80            ; FOR  PAGES 2-7
00003D  9804              :         JZ      L001

Portable National Semiconductor SC/MP Assembler [15.02]

00003F  E480              :         XRI     X'80
000041  90E9              :         JMP     LOOP1
000043  C400              : L001:   LDI     0               ; CLEAR SOME FLAGS
000045  CAF4              :         ST      RUNMOD(P2)
000047  CAF5              :         ST      LISTNG(P2)
000049  C453              :         LDI     LO(BEGIN)       ; INITIALIZE  IL PC SO  THAT
00004B  CAFB              :         ST      PCLOW(P2)       ; NIBL PROGRAM
00004D  C40C              :         LDI     HI(BEGIN)       ; IS EXECUTED IMMEDIATELY
00004F  CAFA              :         ST      PCHIGH(P2)
000051  C400              : CLEAR:  LDI     0
000053  CAEA              :         ST      TEMP(P2)
000055  01                :         XAE
000056  C400              : CLEAR1: LDI     0               ; SET ALL VARIABLES
000058  CA80              :         ST      EREG(P2)        ; TO ZERO
00005A  AAEA              :         ILD     TEMP(P2)
00005C  01                :         XAE
00005D  C434              :         LDI     52
00005F  60                :         XRE
000060  9CF4              :         JNZ     CLEAR1
000062  C450              :         LDI     LO(AESTK)       ; INITIALIZE  SOME STACKS?
000064  CAFD              :         ST      LSTK(P2)        ; ARITHMETIC STACK,
000066  C47A              :         LDI     LO(DOSTAK)
000068  CAFF              :         ST      DOPTR(P2)       ; DO/UNTIL STACK,
00006A  C46A              :         LDI     LO(SBRSTK)
00006C  CAFC              :         ST      SBRPTR(P2)      ; GOSUB STACK,
00006E  C4A6              :         LDI     LO(PCSTAK)
000070  CAF9              :         ST      PCSTK(P2)       ; I. L.  CALL  STACK,
000072  C48A              :         LDI     LO(FORSTK)
000074  CAFE              :         ST      FORPTR(P2)      ; FOR/NEXT STACK
                            
                            
                            ;*************************************
                            ;*   INTERMEDIATE LANGUAGE EXECUTOR  *
                            ;*************************************
                            
000076  C2FB              : EXECIL: LD      PCLOW(P2)       ;SET P3 TO CURRENT
000078  33                :         XPAL    P3              ; IL PC.
000079  C2FA              :         LD      PCHIGH(P2)
00007B  37                :         XPAH    P3
00007C  C701              : CHEAT:  LD      @1(P3)
00007E  01                :         XAE                     ;GET NEW I.L. INSTRUCTION
00007F  C701              :         LD      @1(P3)          ; INTO P3 THROUGH
000081  33                :         XPAL    P3              ; OBSCURE METHODS
000082  CAFB              :         ST      PCLOW(P2)       ;SIMULTANEOUSLY,  INCREMENT
000084  40                :         LDE                     ; THE  I.L.     PC BY 2
000085  D40F              :         ANI     X'0F            ;REMOVE FLAG FROM  INSTRUCTION
000087  DC00              :         ORI     0               ; TURN INTO     ACTUAL ADDRESS, (see note at top of file)
000089  37                :         XPAH    P3              ; PUT  BACK INTO P3
00008A  CAFA              :         ST      PCHIGH(P2)
00008C  40                :         LDE
00008D  D4F0              :         ANI     X'F0            ; CHECK IF I.L.  INSTRUCTION
00008F  E420              :         XRI     TSTBIT          ; IS A 'TEST'
000091  982F              :         JZ      TST
000093  E4A0              :         XRI     CALBIT|TSTBIT   ;CHECK FOR I. L.  CALL

Portable National Semiconductor SC/MP Assembler [15.02]

000095  9807              :         JZ      ILCALL
000097  E4C0              :         XRI     JMPBIT|CALBIT   ;CHECK FOR I.L.  JUMP
000099  98E1              :         JZ      CHEAT           ;l.L.  JUMP IS TRIVIAL
00009B  3F                : NOJUMP: XPPC    P3              ;MUST BE AN ML SUBROUTINE
00009C  90D8              :         JMP     EXECIL          ;  IF NONE OF THE ABOVE
                            
                            
                            ;*************************************
                            ;*     INTERMEDIATE LANGUAGE CALL    *
                            ;*************************************
                            
00009E  C2F9              : ILCALL: LD      PCSTK(P2)
0000A0  E4D6              :         XRI     LO(LBUF)        ;CHECK FOR STACK OVERFLOW
0000A2  9C04              :         JNZ     ILC1
0000A4  C40A              :         LDI     10
0000A6  9060              :         JMP     EOA
0000A8  E4D6              : ILC1:   XRI     LO(LBUF)        ;RESTORE ACCUMULATOR
0000AA  33                :         XPAL    P3              ;SAVE LOW BYTE OF NEW
0000AB  CAEA              :         ST      TEMP(P2)        ;  I.L.  PC IN TEMP
0000AD  C410              :         LDI     HI(PCSTAK)      ;POINT P3 AT I.L.
0000AF  37                :         XPAH    P3              ;  SUBROUTINE STACK
0000B0  01                :         XAE                     ;SAVE NEW I.L.  PC HIGH IN EX
0000B1  C2FB              :         LD      PCLOW(P2)       ;SAVE OLD I.L.  PC ON STACK
0000B3  CF01              :         ST      @1(P3)
0000B5  C2FA              :         LD      PCHIGH(P2)
0000B7  CF01              :         ST      @1(P3)
0000B9  C2EA              :         LD      TEMP(P2)        ;GET LOW BYTE OF NEW
0000BB  33                :         XPAL    P3              ;  I.L.  PC INTO P3 LOW
0000BC  CAF9              :         ST      PCSTK(P2)       ;UPDATE I.L.    STACK POINTER
0000BE  40                :         LDE                     ;GET HIGH BYTE OF NEW
0000BF  37                :         XPAH    P3              ;  I.L.  PC INTO P3 HIGH
0000C0  90BA              : CHEAT1: JMP     CHEAT
                            
                            
                            ;*************************************
                            ;*     I.L.  'TEST' INSTRUCTION      *
                            ;*************************************
                            
0000C2  CAE7              : TST:    ST      CHRNUM(P2)      ;CLEAR NUMBER OF CHARS SCANNED
0000C4  C501              : SCAN:   LD      @1(P1)          ;SLEW OFF SPACES
0000C6  E420              :         XRI     ' '
0000C8  98FA              :         JZ      SCAN
0000CA  C5FF              :         LD      @-1(P1)         ;REPOSITION CURSOR
0000CC  C2FA              :         LD      PCHIGH(P2)      ; POINT P3 AT I.L.  TABLE
0000CE  37                :         XPAH    P3
0000CF  CAEC              :         ST      FAILHI(P2)      ;OLD P3 BECOMES THE
0000D1  C2FB              :         LD      PCLOW(P2)       ;  TEST FAIL ADDRESS
0000D3  33                :         XPAL    P3
0000D4  CAED              :         ST      FAILLO(P2)
0000D6  C701              : LOOP2:  LD      @1(P3)
0000D8  01                :         XAE                     ;SAVE CHAR FROM TABLE
0000D9  BAE7              :         DLD     CHRNUM(P2)      ;DECREMENT CHAR COUNT
0000DB  40                :         LDE                     ;GET  CHAR      BACK
0000DC  D47F              :         ANI     X'7F            ;SCRUB  OFF FLAG (IF  ANY)

Portable National Semiconductor SC/MP Assembler [15.02]

0000DE  E501              :         XOR     @1(P1)          ;IS CHAR EQUAL  TO      TEXT  CHAR?
0000E0  9C07              :         JNZ     LNEQ            ;NO - END  TEST
0000E2  40                :         LDE                     ;YES - BUT IS  IT LAST CHAR?
0000E3  94F1              :         JP      LOOP2           ;IF NOT, CONTINUE  TO COMPARE
0000E5  9095              :         JMP     CHEAT           ; IF SO, GET NEXT I. L.
0000E7  908D              : XO:     JMP     EXECIL          ;  INSTRUCTION
0000E9  C2E7              : LNEQ:   LD      CHRNUM(P2)      ;RESTORE P1 TO
0000EB  01                :         XAE                     ;  ORIGINAL VALUE
0000EC  C580              :         LD      @EREG(P1)
0000EE  C2ED              :         LD      FAILLO(P2)      ;LOAD TEST-FAIL ADDRESS
0000F0  33                :         XPAL    P3              ;  INTO  P3
0000F1  C2EC              :         LD      FAILHI(P2)
0000F3  37                :         XPAH    P3
0000F4  90CA              :         JMP     CHEAT1          ;GET  NEXT      I. L. INSTRUCTION
                            
                            
                            ;*************************************
                            ;*        I.L.  SUBROUTINE RETURN    *
                            ;*************************************
                            
0000F6  C410              : RTN:    LDI     HI(PCSTAK)      ; POINT  P3 AT I.L.  PC STACK
0000F8  37                :         XPAH    P3
0000F9  C2F9              :         LD      PCSTK(P2)
0000FB  33                :         XPAL    P3
0000FC  C7FF              :         LD      @-1(P3)         ;GET HIGH  PART  OF OLD PC
0000FE  01                :         XAE
0000FF  C7FF              :         LD      @-1(P3)         ;GET LOW PART OF OLD PC
000101  33                :         XPAL    P3
000102  CAF9              :         ST      PCSTK(P2)       ;UPDATE IL  STACK POINTER
000104  40                :         LDE
000105  37                :         XPAH    P3              ;P3 NOW HAS OLD  IL PC
000106  90B8              :         JMP     CHEAT1
000108  9041              : EOA:    JMP     EO
                            
                            ;*************************************
                            ;*     SAVE GOSUB RETURN ADDRESS     *
                            ;*************************************
                            
00010A  C2FC              : SAV:    LD      SBRPTR(P2)
00010C  E47A              :         XRI     LO(DOSTAK)      ;CHECK FOR  MORE
00010E  981C              :         JZ      SAV2            ;  THAN 8 SAVES
000110  AAFC              :         ILD     SBRPTR(P2)
000112  AAFC              :         ILD     SBRPTR(P2)
000114  33                :         XPAL    P3              ;SET  P3 TO
000115  C410              :         LDI     HI(SBRSTK)      ;  SUBROUTINE STACK TOP.
000117  37                :         XPAH    P3
000118  C2F4              :         LD      RUNMOD(P2)      ;IF IMMEDIATE MODE,
00011A  980A              :         JZ      SAV1            ; SAVE NEGATIVE  ADDRESS.
00011C  35                :         XPAH    P1              ;SAVE HIGH  PORTION
00011D  CBFF              :         ST      -1(P3)          ;  OF CURSOR
00011F  35                :         XPAH    P1
000120  31                :         XPAL    P1              ;SAVE LOW PORTION
000121  CBFE              :         ST      -2(P3)          ;  OF CURSOR
000123  31                :         XPAL    P1

Portable National Semiconductor SC/MP Assembler [15.02]

000124  90C1              :         JMP     XO              ; RETURN
000126  C4FF              : SAV1:   LDI     -1              ; IMMEDIATE MODE
000128  CBFF              :         ST      -1(P3)          ;  RETURN ADDRESS IS
00012A  90BB              :         JMP     XO              ;  NEGATIVE.
00012C  C40A              : SAV2:   LDI     10              ; ERROR: MORE THAN
00012E  901B              :         JMP     EO              ;  8 GOSUBS
                            
                            ;*************************************
                            ;*     CHECK STATEMENT FINISHED      *
                            ;*************************************
                            
000130  C501              : DONE:    LD     @1(P1)          ;SKIP SPACES
000132  E420              :          XRI    ' '
000134  98FA              :          JZ     DONE
000136  E42D              :          XRI    ' ' | X'0D      ;IS IT CARRIAGE RETURN?
000138  9804              :          JZ     DONE1           ;YES - RETURN
00013A  E437              :          XRI    X'37            ;IS CHAR A ':'?
00013C  9C01              :          JNZ    DONE2           ;NO - ERROR
00013E  3F                : DONE1:   XPPC   P3              ;YES - RETURN
00013F  C404              : DONE2:   LDI    4
000141  9008              :          JMP    EO
                            
                            
                            ;*************************************
                            ;         RETURN  FROM GOSUB         *
                            ;*************************************
                            
000143  C2FC              : RSTR:   LD      SBRPTR(P2)
000145  E46A              :         XRI     LO(SBRSTK)      ; CHECK FOR RETURN
000147  9C04              :         JNZ     RSTR1           ;  W/0 GOSUB
000149  C409              :         LDI     9
00014B  9040              : EO:     JMP     El              ; REPORT THE ERROR
00014D  BAFC              : RSTR1:  DLD     SBRPTR(P2)
00014F  BAFC              :         DLD     SBRPTR(P2)      ;POP GOSUB STACK,
000151  33                :         XPAL    P3              ;  PUT PTR INTO P3
000152  C410              :         LDI     HI(SBRSTK)
000154  37                :         XPAH    P3
000155  C301              :         LD      1(P3)           ;IF ADDRESS NEGATIVE,
000157  9406              :         JP      RSTR2           ;  SUBROUTINE WAS CALLED
000159  C400              :         LDI     0               ;  FROM EDIT MODE,
00015B  CAF4              :         ST      RUNMOD(P2)      ;  SO RETURN TO EDITING
00015D  9088              : XI:     JMP     XO
00015F  35                : RSTR2:  XPAH    P1              ; RESTORE CURSOR HIGH
000160  C300              :         LD      0(P3)
000162  31                :         XPAL    P1              ; RESTORE CURSOR LOW
000163  C401              :         LDI     1               ;SET RUN MODE
000165  CAF4              :         ST      RUNMOD(P2)
000167  90F4              :         JMP     XI
                            
                            
                            ;*************************************
                            ;*  TRANSFER  TO  NEW  STATEMENT     *
                            ;*************************************
                            

Portable National Semiconductor SC/MP Assembler [15.02]

000169  C2F2              : XFER:   LD      LABLHI(P2)      ;CHECK  FOR  NON-EXISTENT LINE
00016B  9404              :         JP      XFER1
00016D  C408              :         LDI     8
00016F  901C              :         JMP     El
000171  C401              : XFER1:  LDI     1               ;SET RUN  MODE  TO  1
000173  CAF4              :         ST      RUNMOD(P2)
000175  3F                :         XPPC    P3
                            
                            
                            ;*************************************
                            ;*    PRINT STRING IN  TEXT          *
                            ;*************************************
                            
                            PRS:    LDPI    P3,PUTC-1       ;POINT  P3 AT PUTC ROUTINE
000176  C40F              +         LDI     HI(PUTC-1)
000178  37                +         XPAH    P3
000179  C49D              +         LDI     LO(PUTC-1)
00017B  33                +         XPAL    P3
00017C  C501              :         LD      @1(P1)  ;L0AD NEXT  CHAR
00017E  E422              :         XRI     '"'             ;IF  ",  END    OF
000180  98DB              :         JZ      XI              ;  STRING
000182  E42F              :         XRI     X'2F            ;IF CR, ERROR
000184  9805              :         JZ      PRS1
000186  E40D              :         XRI     X'0D            ;RESTORE  CHAR
000188  3F                :         XPPC    P3              ;PRINT  CHAR
000189  90EB              :         JMP     PRS             ;GET    NEXT CHAR
00018B  C407              : PRS1:   LDI     7               ;SYNTAX ERROR
00018D  9035              : El:     JMP     E2
                            
                            
                            ;*************************************
                            ;*      PRINT NUMBER ON  STACK       *
                            ;*************************************
                            
                            ; THIS  ROUTINE IS BASED ON DENNIS ALLISON'S BINARY  TO  DECIMAL
                            ; CONVERSION ROUTINE  IN VOL. 1, #1 OF "DR. DOBB'S JOURNAL",
                            ; BUT IS MUCH MORE  OBSCURE BECAUSE OF THE STACK MANIPULATION.
                            
00018F  C410              : PRN:    LDI     HI(AESTK)       ; POINT  P3 AT A. E. STACK
000191  37                :         XPAH    P3
000192  AAFD              :         ILD     LSTK(P2)
000194  AAFD              :         ILD     LSTK(P2)
000196  33                :         XPAL    P3
000197  C40A              :         LDI     10              ;PUT 10 ON STACK  (WE'LL BE
000199  CBFE              :         ST      -2(P3)          ;  DIVIDING BY  IT LATER)
00019B  C400              :         LDI     0
00019D  CBFF              :         ST      -1(P3)
00019F  C405              :         LDI     5               ;SET CHRNUM TO POINT TO PLACE
0001A1  CAE7              :         ST      CHRNUM(P2)      ;   IN  STACK  WHERE WE STORE
0001A3  C4FF              :         LDI     -1              ;   THE CHARACTERS  TO PRINT
0001A5  CB05              :         ST      5(P3)           ;FIRST  CHAR IS A  FLAG (-1)
0001A7  C3FD              :         LD      -3(P3)          ;CHECK  IF NUMBER  IS NEGATIVE
0001A9  9413              :         JP      LPNOS
0001AB  C42D              :         LDI     '-'             ;PUT '-' ON STACK,  AND NEGATE

Portable National Semiconductor SC/MP Assembler [15.02]

0001AD  CB04              :         ST      4(P3)           ;  THE NUMBER
0001AF  C400              :         LDI     0
0001B1  03                :         SCL
0001B2  FBFC              :         CAD     -4(P3)
0001B4  CBFC              :         ST      -4(P3)
0001B6  C400              :         LDI     0
0001B8  FBFD              :         CAD     -3(P3)
0001BA  CBFD              :         ST      -3(P3)
0001BC  909F              :         JMP     XI              ; GO DO DIVISION BY  10
0001BE  C420              : LPNOS:  LDI     ' '             ;IF POSITIVE, PUT ' ' ON
0001C0  CB04              :         ST      4(P3)           ;  STACK BEFORE DIVISION
0001C2  9099              : X4:     JMP     XI
0001C4  9057              : E2:     JMP     ERR1
                            
                            ;  THE DIVISION IS PERFORMED, THEN CONTROL  IS TRANSFERRED
                            ;  TO PRN1, WHICH FOLLOWS.
                            
0001C6  AAFD              : PRN1:   ILD     LSTK(P2)        ; POINT P1  AT A. E. STACK
0001C8  AAFD              :         ILD     LSTK(P2)
0001CA  31                :         XPAL    P1
0001CB  C410              :         LDI     HI(AESTK)
0001CD  35                :         XPAH    P1
0001CE  AAE7              :         ILD     CHRNUM(P2)      ;INCREMENT CHARACTER STACK
0001D0  01                :         XAE                     ;  POINTER,  PUT IN EX.  REG.
0001D1  C101              :         LD      1(P1)           ;GET REMAINDER FROM DIVIDE,
0001D3  DC30              :         ORI     '0'
0001D5  C980              :         ST      EREG(P1)        ;PUT IT ON THE STACK
0001D7  C1FD              :         LD      -3(P1)          ;IS THE QUOTIENT ZERO YET?
0001D9  D9FC              :         OR      -4(P1)
0001DB  980A              :         JZ      QPRNT           ;YES - GO PRINT THE NUMBER
0001DD  C40F              :         LDI     HI(PRNUM1)      ;N0 - CHANGE THE I. L.  PC
0001DF  CAFA              :         ST      PCHIGH(P2)      ;  SO THAT DIVIDE IS
0001E1  C42E              :         LDI     LO(PRNUM1)      ;  PERFORMED AGAIN
0001E3  CAFB              :         ST      PCLOW(P2)
0001E5  90DB              :         JMP     X4              ;G0 DO DIVISION BY 10 AGAIN
                            QPRNT:  LDPI    P3,PUTC-1       ;POINT P3 AT PUTC ROUTINE
0001E7  C40F              +         LDI     HI(PUTC-1)
0001E9  37                +         XPAH    P3
0001EA  C49D              +         LDI     LO(PUTC-1)
0001EC  33                +         XPAL    P3
0001ED  C2F5              :         LD      LISTNG(P2)      ;IF LISTING, SKIP PRINTING
0001EF  9C06              :         JNZ     QPRNT2          ;  LEADING SPACE
0001F1  C104              :         LD      4(P1)           ;PRINT EITHER
0001F3  3F                :         XPPC    P3              ;  OR LEADING SPACE
0001F4  C2E7              :         LD      CHRNUM(P2)      ;GET EX.  REG. VALUE BACK
0001F6  01                :         XAE
0001F7  C580              : QPRNT2: LD      @EREG(P1)       ;POINT P3 AT FIRST CHAR
0001F9  C100              :         LD      (P1)            ;  TO BE PRINTED
0001FB  3F                : LOOP3:  XPPC    P3              ;PRINT THE CHARACTER
0001FC  C5FF              :         LD      @-1(P1)         ;GET NEXT CHARACTER
0001FE  94FB              :         JP      LOOP3           ;REPEAT UNTIL = -1
000200  C450              :         LDI     LO(AESTK)
000202  CAFD              :         ST      LSTK(P2)        ; CLEAR THE A. E.  STACK
000204  C2F5              :         LD      LISTNG(P2)      ;PRINT A TRAILING SPACE

Portable National Semiconductor SC/MP Assembler [15.02]

000206  9CBA              :         JNZ     X4              ;  IF NOT LISTING PROGRAM
000208  C420              :         LDI     ' '
00020A  3F                :         XPPC    P3
00020B  90B5              :         JMP     X4
                            
                            
                            ;*************************************
                            ;*      CARRIAGE RETURN/LINE FEED    *
                            ;*************************************
                            
                            NLINE:  LDPI    P3,PUTC-1       ;POINT P3 AT PUTC ROUTINE
00020D  C40F              +         LDI     HI(PUTC-1)
00020F  37                +         XPAH    P3
000210  C49D              +         LDI     LO(PUTC-1)
000212  33                +         XPAL    P3
000213  C40D              :         LDI     X'0D            ;CARRIAGE RETURN
000215  3F                :         XPPC    P3
000216  C40A              :         LDI     X'0A            ;LINE FEED
000218  3F                :         XPPC    P3
000219  90A7              : X5:     JMP     X4
                            
                            
                            ;*************************************
                            ;*         ERROR  ROUTINE            *
                            ;*************************************
                            
00021B  C405              : ERR:    LDI     5               ;SYNTAX ERROR
00021D  CAEB              : ERR1:   ST      NUM(P2)         ;SAVE ERROR #
00021F  C2EB              : ERR2:   LD      NUM(P2)
000221  CAEA              :         ST      TEMP(P2)
                                    LDPI    P3,PUTC-1       ;POINT P3 AT PUTC
000223  C40F              +         LDI     HI(PUTC-1)
000225  37                +         XPAH    P3
000226  C49D              +         LDI     LO(PUTC-1)
000228  33                +         XPAL    P3
000229  C40D              :         LDI     X'0D            ; PRINT CR/LF
00022B  3F                :         XPPC    P3
00022C  C40A              :         LDI     X'0A
00022E  3F                :         XPPC    P3
                                    LDPI    P1,MESGS        ;P1 -> ERROR MESSAGES
00022F  C40F              +         LDI     HI(MESGS)
000231  35                +         XPAH    P1
000232  C436              +         LDI     LO(MESGS)
000234  31                +         XPAL    P1
000235  BAEB              : QQ1:    DLD     NUM(P2)         ;IS THIS THE RIGHT MESSAGE?
000237  9806              :         JZ      QQMSG           ;YES - GO PRINT  IT
000239  C501              : LOOP4:  LD      @1(P1)          ;N0 - SCAN THROUGH TO
00023B  94FC              :         JP      LOOP4           ;  NEXT MESSAGE
00023D  90F6              :         JMP     QQ1
00023F  C501              : QQMSG:  LD      @1(P1)          ;GET MESSAGE CHAR
000241  3F                :         XPPC    P3              ;PRINT IT
000242  C1FF              :         LD      -1(P1)          ; IS MESSAGE DONE?
000244  94F9              :         JP      QQMSG           ;N0 - GET NEXT CHAR
000246  C2EA              :         LD      TEMP(P2)        ;WAS THIS A BREAK MESSAGE?

Portable National Semiconductor SC/MP Assembler [15.02]

000248  E40E              :         XRI     14
00024A  980D              :         JZ      QQ3             ;YES - SKIP PRINTING 'ERROR'
                                    LDPI    P1,MESGS        ;NO - PRINT ERROR
00024C  C40F              +         LDI     HI(MESGS)
00024E  35                +         XPAH    P1
00024F  C436              +         LDI     LO(MESGS)
000251  31                +         XPAL    P1
000252  C501              : QQ2:    LD      @1(P1)          ;GET CHARACTER
000254  3F                :         XPPC    P3              ;PRINT IT
000255  C1FF              :         LD      -1(P1)          ;DONE?
000257  94F9              :         JP      QQ2             ;NO- REPEAT LOOP
000259  C2F4              : QQ3:    LD      RUNMOD(P2)      ;DON'T PRINT LINE #
00025B  984D              :         JZ      FIN             ;  IF IMMEDIATE MODE
00025D  C420              :         LDI     ' '
00025F  3F                :         XPPC    P3              ;SPACE
000260  C441              :         LDI     'A'             ;AT
000262  3F                :         XPPC    P3
000263  C454              :         LDI     'T'
000265  3F                :         XPPC    P3
000266  C410              :         LDI     HI(AESTK)       ; POINT P3 AT A. E. STACK
000268  37                :         XPAH    P3
000269  AAFD              :         ILD     LSTK(P2)
00026B  AAFD              :         ILD     LSTK(P2)
00026D  33                :         XPAL    P3
00026E  C2F7              :         LD      HILINE(P2)      ;GET HIGH BYTE OF LINE #
000270  CBFF              :         ST      -1(P3)          ;PUT ON STACK
000272  C2F8              :         LD      LOLINE(P2)      ; GET LOW BYTE OF LINE #
000274  CBFE              :         ST      -2(P3)          ;PUT ON STACK
000276  C42C              :         LDI     LO(ERRNUM)      ; GO TO PRN
000278  CAFB              :         ST      PCLOW(P2)
00027A  C40E              :         LDI     HI(ERRNUM)
00027C  CAFA              :         ST      PCHIGH(P2)
00027E  9099              : X5A:    JMP     X5
                            
                            
                            ;*************************************
                            ;*    BREAK,  NXT,  FIN,  & STRT     *
                            ;*************************************
                            
000280  C40E              : BREAK:  LDI     14              ;***  CAUSE  A  BREAK  ***
000282  9099              : E3A:    JMP     ERR1
                                                            ;*** NEXT STATEMENT ***
000284  C2F4              : NXT:    LD      RUNMOD(P2)      ; IF IN EDIT MODE,
000286  9822              :         JZ      FIN             ;  STOP EXECUTION
000288  C100              :         LD      (P1)            ;IF WE HIT END OF FILE,
00028A  D480              :         ANI     X'80            ;  FINISH UP THINGS
00028C  9C1C              :         JNZ     FIN
00028E  06                :         CSA                     ; BREAK IF SOMEONE IS
00028F  D420              :         ANI     X'20            ;  TYPING ON THE CONSOLE
000291  98ED              :         JZ      BREAK
000293  C1FF              :         LD      -1(P1)          ;GET LAST CHARACTER SCANNED
000295  E40D              :         XRI     X'0D            ;WAS IT CARRIAGE RETURN?
000297  9C08              :         JNZ     NXT1            ;YES - SKIP FOLLOWING UPDATES
000299  C501              :         LD      @1(P1)          ;GET HIGH BYTE OF NEXT LINE #

Portable National Semiconductor SC/MP Assembler [15.02]

00029B  CAF7              :         ST      HILINE(P2)      ;SAVE IT
00029D  C502              :         LD      @2(P1)          ;GET LOW BYTE OF LINE #,  SKIP
00029F  CAF8              :         ST      LOLINE(P2)      ;  LINE LENGTH BYTE
0002A1  C40C              : NXT1:   LDI     HI(STMT)        ; GO TO  STMT   IN IL TABLE
0002A3  CAFA              :         ST      PCHIGH(P2)
0002A5  C481              :         LDI     LO(STMT)
0002A7  CAFB              :         ST      PCLOW(P2)
0002A9  3F                :         XPPC    P3
                            
0002AA  C400              : FIN:    LDI     0               ;*** FINISH EXECUTION ***
0002AC  CAF4              :         ST      RUNMOD(P2)      ; CLEAR RUN MODE
0002AE  C450              :         LDI     LO(AESTK)       ; CLEAR ARITHMETIC STACK
0002B0  CAFD              :         ST      LSTK(P2)
0002B2  C417              :         LDI     LO(START)       ; MODIFY I.L.   PC TO RETURN
0002B4  CAFB              :         ST      PCLOW(P2)       ;  TO PROMPT FOR COMMAND
0002B6  C40C              :         LDI     HI(START)
0002B8  CAFA              :         ST      PCHIGH(P2)
0002BA  C4A6              :         LDI     LO(PCSTAK)
0002BC  CAF9              :         ST      PCSTK(P2)
0002BE  90BE              :         JMP     X5A
                                                            ;*** START EXECUTION ***
0002C0  AAF4              : STRT:   ILD     RUNMOD(P2)      ;RUN MODE = 1
0002C2  C2E9              :         LD      TEMP2(P2)       ;POINT CURSOR TO
0002C4  35                :         XPAH    P1              ;  START OF NIBL PROGRAM
0002C5  C2E8              :         LD      TEMP3(P2)
0002C7  31                :         XPAL    P1
0002C8  C46A              :         LDI     LO(SBRSTK)      ;EMPTY SOME STACKS:
0002CA  CAFC              :         ST      SBRPTR(P2)      ;  GOSUB STACK,
0002CC  C48A              :         LDI     LO(FORSTK)
0002CE  CAFE              :         ST      FORPTR(P2)      ;  FOR STACK
0002D0  C47A              :         LDI     LO(DOSTAK)
0002D2  CAFF              :         ST      DOPTR(P2)       ;  & DO/UNTIL STACK
0002D4  3F                :         XPPC    P3              ;RETURN
0002D5  90A7              : X6:     JMP     X5A
0002D7  90A9              : E4:     JMP     E3A
                            
                            
                            ;*************************************
                            ;*        LIST NIBL PROGRAM          *
                            ;*************************************
                            
0002D9  C100              : LST:    LD      (P1)            ;CHECK FOR END OF FILE
0002DB  E480              :         XRI     X'80
0002DD  9418              :         JP      LST2
0002DF  C410              :         LDI     HI(AESTK)       ;GET LINE NUMBER ONTO STACK
0002E1  37                :         XPAH    P3
0002E2  AAFD              :         ILD     LSTK(P2)
0002E4  AAFD              :         ILD     LSTK(P2)
0002E6  33                :         XPAL    P3
0002E7  C501              :         LD      @1(P1)
0002E9  CBFF              :         ST      -1(P3)
0002EB  C501              :         LD      @1(P1)
0002ED  CBFE              :         ST      -2(P3)
0002EF  C501              :         LD      @1(P1)          ;SKIP OVER LINE LENGTH

Portable National Semiconductor SC/MP Assembler [15.02]

0002F1  C401              :         LDI     1
0002F3  CAF5              :         ST      LISTNG(P2)      ;SET LISTING FLAG
0002F5  90DE              :         JMP     X6              ; GO PRINT LINE NUMBER
0002F7  C400              : LST2:   LDI     0
0002F9  CAF5              :         ST      LISTNG(P2)      ;CLEAR LISTING FLAG
                                    JS      P3,NXT          ; GO TO NXT
0002FB  C402              +         LDI     HI((NXT)-1)
0002FD  37                +         XPAH    P3
0002FE  C483              +         LDI     LO((NXT)-1)
000300  33                +         XPAL    P3
000301  3F                +         XPPC    P3
000302  90D1              : X6A:    JMP     X6
000304  90D1              : E5:     JMP     E4
                            LST3:   LDPI    P3,PUTC-1       ;POINT P3 AT PUTC
000306  C40F              +         LDI     HI(PUTC-1)
000308  37                +         XPAH    P3
000309  C49D              +         LDI     LO(PUTC-1)
00030B  33                +         XPAL    P3
00030C  06                : LST4:   CSA
00030D  D420              :         ANI     X'20
00030F  98E6              :         JZ      LST2            ;IF  TYPING, STOP
000311  C501              :         LD      @1(P1)          ;GET NEXT CHAR
000313  E40D              :         XRI     X'0D            ;TEST FOR CR
000315  9805              :         JZ      LST5
000317  E40D              :         XRI     X'0D            ;GET CHARACTER
000319  3F                :         XPPC    P3              ;PRINT CHARACTER
00031A  90F0              :         JMP     LST4
00031C  C40D              : LST5:   LDI     X'0D            ; CARRIAGE RETURN
00031E  3F                :         XPPC    P3
00031F  C40A              :         LDI     X'0A            ;LINE FEED
000321  3F                :         XPPC    P3
000322  02                :         CCL
000323  C446              :         LDI     LO(LIST3)
000325  CAFB              :         ST      PCLOW(P2)
000327  C40C              :         LDI     HI(LIST3)
000329  CAFA              :         ST      PCHIGH(P2)
00032B  90AC              :         JMP     LST             ;GET NEXT LINE
                            
                            
                            ;*************************************
                            ;*          ADD AND SUBTRACT         *
                            ;*************************************
                            
00032D  C410              : ADD:    LDI     HI(AESTK)       ;SET P3  TO CURRENT
00032F  37                :         XPAH    P3              ;  STACK  LOCATION
000330  BAFD              :         DLD     LSTK(P2)
000332  BAFD              :         DLD     LSTK(P2)
000334  33                :         XPAL    P3
000335  02                :         CCL
000336  C3FE              :         LD      -2(P3)          ; REPLACE TWO TOP  ITEMS
000338  F300              :         ADD     0(P3)           ;  ON STACK BY THEIR SUM
00033A  CBFE              :         ST      -2(P3)
00033C  C3FF              :         LD      -1(P3)
00033E  F301              :         ADD     1(P3)

Portable National Semiconductor SC/MP Assembler [15.02]

000340  CBFF              :         ST      -1(P3)
000342  90BE              : X7:     JMP     X6A
                            
000344  C410              : SUB:    LDI     HI(AESTK)       ;SET P3  TO CURRENT
000346  37                :         XPAH    P3              ;  STACK  LOCATION
000347  BAFD              :         DLD     LSTK(P2)
000349  BAFD              :         DLD     LSTK(P2)
00034B  33                :         XPAL    P3
00034C  03                :         SCL
00034D  C3FE              :         LD      -2(P3)          ;REPLACE TWO TOP ITEMS
00034F  FB00              :         CAD     0(P3)           ;  ON STACK BY THEIR
000351  CBFE              :         ST      -2(P3)          ;  DIFFERENCE
000353  C3FF              :         LD      -1(P3)
000355  FB01              :         CAD     1(P3)
000357  CBFF              :         ST      -1(P3)
000359  90A7              :         JMP     X6A
                            
                            
                            ;*************************************
                            ;*           NEGATE                  *
                            ;*************************************
                            
00035B  C410              : NEG:     LDI    HI(AESTK)       ;SET P3  TO CURRENT
00035D  37                :          XPAH   P3              ;  STACK  LOCATION
00035E  C2FD              :          LD     LSTK(P2)
000360  33                :          XPAL   P3
000361  03                :          SCL
000362  C400              :          LDI    0
000364  FBFE              :          CAD    -2(P3)          ; NEGATE TOP ITEM ON STACK
000366  CBFE              :          ST     -2(P3)
000368  C400              :          LDI    0
00036A  FBFF              :          CAD    -1(P3)
00036C  CBFF              :          ST     -1(P3)
00036E  90D2              : X8:      JMP    X7
000370  9092              : E6:      JMP    E5
                            
                            
                            ;*************************************
                            ;*          MULTIPLY                 *
                            ;*************************************
                            
000372  C410              : MUL:    LDI     HI(AESTK)       ;SET P3 TO CURRENT
000374  37                :         XPAH    P3              ;  STACK LOCATION
000375  C2FD              :         LD      LSTK(P2)
000377  33                :         XPAL    P3              ; DETERMINE SIGN OF PRODUCT,
000378  C3FF              :         LD      -1(P3)          ;  SAVE IN TEMP(P2)
00037A  E3FD              :         XOR     -3(P3)
00037C  CAEA              :         ST      TEMP(P2)
00037E  C3FF              :         LD      -1(P3)          ; CHECK FOR NEGATIVE
000380  940D              :         JP      MM1             ;  MULTIPLIER
000382  03                :         SCL
000383  C400              :         LDI     0               ;IF NEGATIVE,
000385  FBFE              :         CAD     -2(P3)          ;  NEGATE
000387  CBFE              :         ST      -2(P3)

Portable National Semiconductor SC/MP Assembler [15.02]

000389  C400              :         LDI     0
00038B  FBFF              :         CAD     -1(P3)
00038D  CBFF              :         ST      -1(P3)
00038F  C3FD              : MM1:    LD      -3(P3)          ; CHECK FOR NEGATIVE
000391  940D              :         JP      MM2             ;  MULTIPLICAND
000393  03                :         SCL
000394  C400              :         LDI     0               ; IF NEGATIVE,
000396  FBFC              :         CAD     -4(P3)          ;  NEGATE
000398  CBFC              :         ST      -4(P3)
00039A  C400              :         LDI     0
00039C  FBFD              :         CAD     -3(P3)
00039E  CBFD              :         ST      -3(P3)
0003A0  C400              : MM2:    LDI     0               ; CLEAR WORKSPACE
0003A2  CB00              :         ST      0(P3)
0003A4  CB01              :         ST      1(P3)
0003A6  CB02              :         ST      2(P3)
0003A8  CB03              :         ST      3(P3)
0003AA  C410              :         LDI     16              ;SET COUNTER TO 16
0003AC  CAEB              :         ST      NUM(P2)
0003AE  C3FF              : LOOP5:  LD      -1(P3)          ; ROTATE MULTIPLIER
0003B0  1F                :         RRL                     ;  RIGHT ONE BIT
0003B1  CBFF              :         ST      -1(P3)
0003B3  C3FE              :         LD      -2(P3)
0003B5  1F                :         RRL
0003B6  CBFE              :         ST      -2(P3)
0003B8  06                :         CSA                     ;CHECK FOR CARRY BIT
0003B9  9411              :         JP      MM3             ;IF NOT SET, DON'T DO ADD
0003BB  02                :         CCL
0003BC  C302              :         LD      2(P3)           ;ADD MULTIPLICAND
0003BE  F3FC              :         ADD     -4(P3)          ;  INTO WORKSPACE
0003C0  CB02              :         ST      2(P3)
0003C2  C303              :         LD      3(P3)
0003C4  F3FD              :         ADD     -3(P3)
0003C6  CB03              :         ST      3(P3)
0003C8  9002              :         JMP     MM3
0003CA  90A4              : E6A:    JMP     E6
0003CC  02                : MM3:    CCL
0003CD  C303              :         LD      3(P3)           ;SHIFT WORKSPACE RIGHT BY 1
0003CF  1F                :         RRL
0003D0  CB03              :         ST      3(P3)
0003D2  C302              :         LD      2(P3)
0003D4  1F                :         RRL
0003D5  CB02              :         ST      2(P3)
0003D7  C301              :         LD      1(P3)
0003D9  1F                :         RRL
0003DA  CB01              :         ST      1(P3)
0003DC  C300              :         LD      0(P3)
0003DE  1F                :         RRL
0003DF  CB00              :         ST      0(P3)
0003E1  BAEB              :         DLD     NUM(P2)         ;DECREMENT COUNTER
0003E3  9CC9              :         JNZ     LOOP5           ;LOOP IF NOT ZERO
0003E5  9002              :         JMP     MM4
0003E7  9085              : X9:     JMP     X8
0003E9  C2EA              : MM4:    LD      TEMP(P2)        ; CHECK SIGN WORD

Portable National Semiconductor SC/MP Assembler [15.02]

0003EB  940D              :         JP      MMEXIT          ;IF BIT7 = 1,  NEGATE PRODUCT
0003ED  03                :         SCL
0003EE  C400              :         LDI     0
0003F0  FB00              :         CAD     0(P3)
0003F2  CB00              :         ST      0(P3)
0003F4  C400              :         LDI     0
0003F6  FB01              :         CAD     1(P3)
0003F8  CB01              :         ST      1(P3)
0003FA  C300              : MMEXIT: LD      0(P3)           ;PUT PRODUCT ON TOP
0003FC  CBFC              :         ST      -4(P3)          ;  OF STACK
0003FE  C301              :         LD      1(P3)
000400  CBFD              :         ST      -3(P3)
000402  BAFD              :         DLD     LSTK(P2)        ;SUBTRACT 2 FROM
000404  BAFD              :         DLD     LSTK(P2)        ;  LSTK
000406  90DF              :         JMP     X9
                            
                            
                            ;*************************************
                            ;*            DIVIDE                 *
                            ;*************************************
                            
000408  C410              : DIV:    LDI     HI(AESTK)
00040A  37                :         XPAH    P3
00040B  C2FD              :         LD      LSTK(P2)
00040D  33                :         XPAL    P3
00040E  C3FF              :         LD      -1(P3)          ; CHECK FOR DIVISION BY 0
000410  DBFE              :         OR      -2(P3)
000412  9C04              :         JNZ     QD0
000414  C40D              :         LDI     13
000416  90B2              :         JMP     E6A
000418  C3FD              : QD0:    LD      -3(P3)
00041A  E3FF              :         XOR     -1(P3)
00041C  CAEA              :         ST      TEMP(P2)        ;SAVE SIGN OF QUOTIENT
00041E  C3FD              :         LD      -3(P3)          ; IS DIVIDEND POSITIVE?
000420  9411              :         JP      QDPOS           ;YES - JUMP
000422  C400              :         LDI     0
000424  03                :         SCL
000425  FBFC              :         CAD     -4(P3)          ;N0 - NEGATE DIVIDEND,
000427  CB03              :         ST      3(P3)           ;  STORE IN RIGHT HALF
000429  C400              :         LDI     0               ;  OF 32-BIT ACCUMULATOR
00042B  FBFD              :         CAD     -3(P3)
00042D  CB02              :         ST      2(P3)
00042F  900A              :         JMP     QD1
000431  90B4              : X9A:    JMP     X9
000433  C3FD              : QDPOS:  LD      -3(P3)          ; STORE NON-NEGATED DIVIDEND
000435  CB02              :         ST      2(P3)           ;  IN 32-BIT ACCUMULATOR
000437  C3FC              :         LD      -4(P3)
000439  CB03              :         ST      3(P3)
00043B  C3FF              : QD1:    LD      -1(P3)          ; CHECK FOR NEGATIVE DIVISOR
00043D  940D              :         JP      QD2
00043F  C400              :         LDI     0               ; NEGATE DIVISOR
000441  03                :         SCL
000442  FBFE              :         CAD     -2(P3)
000444  CBFE              :         ST      -2(P3)

Portable National Semiconductor SC/MP Assembler [15.02]

000446  C400              :         LDI     0
000448  FBFF              :         CAD     -1(P3)
00044A  CBFF              :         ST      -1(P3)
00044C  C400              : QD2:    LDI     0               ;PUT  ZERO  IN
00044E  CB01              :         ST      1(P3)           ;   LEFT HALF OF 32-BIT ACC,
000450  CB00              :         ST      0(P3)
000452  CAEB              :         ST      NUM(P2)         ;   THE COUNTER,  AND
000454  CBFD              :         ST      -3(P3)          ;   IN THE  DIVIDEND,  NOW USED
000456  CBFC              :         ST      -4(P3)          ;   STORE THE QUOTIENT
000458  02                : LOOP6:  CCL                     ; BEGIN MAIN DIVIDE LOOP -
000459  C3FC              :         LD      -4(P3)          ;   SHIFT QUOTIENT LEFT,
00045B  F3FC              :         ADD     -4(P3)
00045D  CBFC              :         ST      -4(P3)
00045F  C3FD              :         LD      -3(P3)
000461  F3FD              :         ADD     -3(P3)
000463  CBFD              :         ST      -3(P3)
000465  02                :         CCL                     ;   SHIFT 32-BIT ACC LEFT,
000466  C303              :         LD      3(P3)
000468  F303              :         ADD     3(P3)
00046A  CB03              :         ST      3(P3)
00046C  C302              :         LD      2(P3)
00046E  F302              :         ADD     2(P3)
000470  CB02              :         ST      2(P3)
000472  C301              :         LD      1(P3)
000474  F301              :         ADD     1(P3)
000476  CB01              :         ST      1(P3)
000478  C300              :         LD      (P3)
00047A  F300              :         ADD     (P3)
00047C  CB00              :         ST      (P3)
00047E  03                :         SCL
00047F  C301              :         LD      1(P3)           ;   SUBTRACT DIVISOR INTO
000481  FBFE              :         CAD     -2(P3)          ;    LEFT HALF OF ACC,
000483  CB01              :         ST      1(P3)
000485  C300              :         LD      (P3)
000487  FBFF              :         CAD     -1(P3)
000489  CB00              :         ST      (P3)
00048B  9411              :         JP      QDENT1          ;   IF RESULT IS NEGATIVE,
00048D  02                :         CCL                     ;    RESTORE ORIGINAL CONTENTS
00048E  C301              :         LD      1(P3)           ;    OF ACC BY ADDING DIVISOR
000490  F3FE              :         ADD     -2(P3)
000492  CB01              :         ST      1(P3)
000494  C300              :         LD      (P3)
000496  F3FF              :         ADD     -1(P3)
000498  CB00              :         ST      (P3)
00049A  9008              :         JMP     QD3
00049C  9093              : X9B:    JMP     X9A
00049E  C3FC              : QDENT1: LD      -4(P3)          ;ELSE IF RESULT POSITIVE,
0004A0  DC01              :         ORI     1               ;RECORD A 1  IN QUOTIENT
0004A2  CBFC              :         ST      -4(P3)          ;W/0 RESTORING THE ACC
0004A4  AAEB              : QD3:    ILD     NUM(P2)         ;INCREMENT THE COUNTER
0004A6  E410              :         XRI     16              ;ARE WE DONE?
0004A8  9CAE              :         JNZ     LOOP6           ;LOOP IF NOT  DONE
0004AA  C2EA              :         LD      TEMP(P2)        ;CHECK THE QUOTIENT'S SIGN,
0004AC  940D              :         JP      QDEND           ;  NEGATING IF NECESSARY

Portable National Semiconductor SC/MP Assembler [15.02]

0004AE  C400              :         LDI     0
0004B0  03                :         SCL
0004B1  FBFC              :         CAD     -4(P3)
0004B3  CBFC              :         ST      -4(P3)
0004B5  C400              :         LDI     0
0004B7  FBFD              :         CAD     -3(P3)
0004B9  CBFD              :         ST       -3(P3)
0004BB  BAFD              : QDEND:  DLD     LSTK(P2)        ;DECREMENT THE  STACK POINTER,
0004BD  BAFD              :         DLD     LSTK(P2)
0004BF  90DB              :         JMP     X9B             ;  AND EXIT
                            
                            
                            ;*************************************
                            ;*         STORE VARIABLE            *
                            ;*************************************
                            
0004C1  C410              : STORE:  LDI     HI(AESTK)       ;SET P3 TO STACK
0004C3  37                :         XPAH    P3
0004C4  C2FD              :         LD      LSTK(P2)
0004C6  33                :         XPAL    P3
0004C7  C7FD              :         LD      @-3(P3)         ;GET VARIABLE INDEX
0004C9  01                :         XAE                     ;PUT IN E REG
0004CA  C301              :         LD      1(P3)
0004CC  CA80              :         ST      EREG(P2)        ;STORE LOWER 3  BITS
0004CE  02                :         CCL                     ;  INTO VARIABLE
0004CF  40                :         LDE                     ;INCREMENT INDEX
0004D0  F401              :         ADI     1
0004D2  01                :         XAE
0004D3  C302              :         LD      2(P3)
0004D5  CA80              :         ST      EREG(P2)        ;STORE UPPER 8 BITS
0004D7  33                :         XPAL    P3              ;INTO VARIABLE
0004D8  CAFD              :         ST      LSTK(P2)        ;UPDATE STACK POINTER
                            X10:    JS      P3,EXECIL
0004DA  C400              +         LDI     HI((EXECIL)-1)
0004DC  37                +         XPAH    P3
0004DD  C475              +         LDI     LO((EXECIL)-1)
0004DF  33                +         XPAL    P3
0004E0  3F                +         XPPC    P3
                            
                            
                            ;*************************************
                            ;*   TEST FOR  VARIABLE  IN TEXT     *
                            ;*************************************
                            
0004E1  C501              : TSTVAR: LD      @1(P1)
0004E3  E420              :         XRI     ' '             ;SLEW OFF SPACES
0004E5  98FA              :         JZ      TSTVAR
0004E7  C1FF              :         LD      -1(P1)          ;CHARACTER IN QUESTION
0004E9  03                :         SCL
0004EA  FC5B              :         CAI     'Z'+1           ;SUBTRACT 'Z'+l
0004EC  9405              :         JP      TV_FAIL         ;N0T VARIABLE IF POSITIVE
0004EE  03                :         SCL
0004EF  FCE6              :         CAI     'A'-'Z'-1       ;SUBTRACT 'A'
0004F1  9412              :         JP      TVMAYBE         ;IF POS,  MAY BE VARIABLE

Portable National Semiconductor SC/MP Assembler [15.02]

0004F3  C5FF              : TV_FAIL:LD      @-1(P1)         ;BACKSPACE CURSOR
0004F5  C2FB              :         LD      PCLOW(P2)       ;GET TEST-FAIL ADDRESS
0004F7  33                :         XPAL    P3              ;  FROM I. L.   TABLE,  PUT IT
0004F8  C2FA              :         LD      PCHIGH(P2)      ;  INTO I.L.  PROGRAM COUNTER
0004FA  37                :         XPAH    P3
0004FB  C300              :         LD      (P3)
0004FD  CAFA              :         ST      PCHIGH(P2)
0004FF  C301              :         LD      1(P3)
000501  CAFB              :         ST      PCLOW(P2)
000503  90D5              :         JMP     X10
000505  01                : TVMAYBE:XAE                     ;SAVE VALUE (0-25)
000506  C100              :         LD      (P1)            ;CHECK FOLLOWING CHAR
000508  03                :         SCL                     ;MUST NOT BE A LETTER
000509  FC5B              :         CAI     'Z'+1           ;OTHERWISE WE'D BE LOOKING
00050B  9405              :         JP      TV_OK           ;AT A KEYWORD, NOT A VARIABLE
00050D  03                :         SCL
00050E  FCE6              :         CAI     'A'-'Z'-1
000510  94E1              :         JP      TV_FAIL
000512  C410              : TV_OK:  LDI     HI(AESTK)       ;SET PS TO CURRENT
000514  37                :         XPAH    P3              ;  STACK LOCATION
000515  AAFD              :         ILD     LSTK(P2)        ;INCR STACK POINTER
000517  33                :         XPAL    P3
000518  02                :         CCL                     ;DOUBLE VARIABLE INDEX
000519  40                :         LDE
00051A  70                :         ADE
00051B  CBFF              :         ST      -1(P3)          ;PUT INDEX ON STACK
00051D  C402              :         LDI     2               ; INCREMENT I.L.  PC,   SKIPPING
00051F  02                :         CCL                     ;  OVER TEST-FAIL ADDRESS
000520  F2FB              :         ADD     PCLOW(P2)
000522  CAFB              :         ST      PCLOW(P2)
000524  C400              :         LDI     0
000526  F2FA              :         ADD     PCHIGH(P2)
000528  CAFA              :         ST      PCHIGH(P2)
00052A  90AE              :         JMP     X10
                            
                            
                            ;*************************************
                            ;*      IND - EVALUATE A VARIABLE    *
                            ;*************************************
                            
00052C  C410              : IND:    LDI     HI(AESTK)       ;SET P3 TO STACK
00052E  37                :         XPAH    P3
00052F  AAFD              :         ILD     LSTK(P2)
000531  33                :         XPAL    P3
000532  C3FE              :         LD      -2(P3)          ;GET INDEX OFF TOP
000534  01                :         XAE                     ;PUT INDEX IN E REG
000535  C280              :         LD      EREG(P2)        ;GET LOWER 8 BITS
000537  CBFE              :         ST      -2(P3)          ;SAVE ON STACK
000539  02                :         CCL
00053A  40                :         LDE                     ; INCREMENT E REG
00053B  F401              :         ADI     1
00053D  01                :         XAE
00053E  C280              :         LD      EREG(P2)        ;GET UPPER 8 BITS
000540  CBFF              :         ST      -1(P3)          ;SAVE ON STACK

Portable National Semiconductor SC/MP Assembler [15.02]

000542  9096              : XI1:    JMP     X10
                            
                            
                            ;*************************************
                            ;*      RELATIONAL OPERATORS         *
                            ;*************************************
                            
000544  C401              : EQ:     LDI     1               ;EACH RELATIONAL OPERATOR
000546  9012              :         JMP     CMP             ;  LOADS A NUMBER USED LATER
000548  C402              : NEQ:    LDI     2               ;  AS A CASE SELECTOR, AFTER
00054A  900E              :         JMP     CMP             ;  THE TWO OPERANDS ARE COM-
00054C  C403              : LSS:    LDI     3               ;  PARED.   BASED ON THE COM-
00054E  900A              :         JMP     CMP             ;  PARISON,  FLAGS ARE SET THAT
000550  C404              : LEQ:    LDI     4               ;  ARE EQUIVALENT TO THOSE SET
000552  9006              :         JMP     CMP             ;  BY THE "CMP" INSTRUCTION IN
000554  C405              : GTR:    LDI     5               ;  THE PDP-11.  THESE PSEUDO-
000556  9002              :         JMP     CMP             ;  FLAGS ARE USED TO DETERMINE
000558  C406              : GEQ:    LDI     6               ;  WHETHER THE PARTICULAR
                                                            ; RELATION IS SATISFIED OR NO
00055A  CAEB              : CMP:    ST      NUM(P2)
00055C  C410              :         LDI     HI(AESTK)       ;SET P3 -> ARITH STACK
00055E  37                :         XPAH    P3
00055F  BAFD              :         DLD     LSTK(P2)
000561  BAFD              :         DLD     LSTK(P2)
000563  33                :         XPAL    P3
000564  03                :         SCL
000565  C3FE              :         LD      -2(P3)          ; SUBTRACT THE TWO OPERANDS,
000567  FB00              :         CAD     (P3)            ;  STORING RESULT IN LO & HI
000569  CAEF              :         ST      LOW(P2)
00056B  C3FF              :         LD      -1(P3)
00056D  FB01              :         CAD     1(P3)
00056F  CAEE              :         ST      HIGH(P2)
000571  E3FF              :         XOR     -1(P3)          ;OVERFLOW OCCURS IF  SIGNS OF
000573  01                :         XAE                     ;  RESULT AND 1ST OPERAND
000574  C3FF              :         LD      -1(P3)          ;  DIFFER,  AND SIGNS    OF THE
000576  E301              :         XOR     1(P3)           ;  TWO OPERANDS DIFFER
000578  50                :         ANE                     ;BIT 7 EQUIVALENT TO V FLAG
000579  E2EE              :         XOR     HIGH(P2)        ;BIT 7 EQUIVALENT TO N XOR V
00057B  CAEA              :         ST      TEMP(P2)        ;STORE IN TEMP
00057D  C2EE              :         LD      HIGH(P2)        ;DETERMINE IF RESULT WAS ZERO
00057F  DAEF              :         OR      LOW(P2)
000581  9802              :         JZ      SETZ            ;IF RESULT=0,    SET Z  FLAG
000583  C480              :         LDI     X'80            ;  ELSE CLEAR Z FLAG
000585  E480              : SETZ:   XRI     X'80
000587  01                :         XAE                     ;BIT 7 OF EX = Z FLAG
000588  BAEB              :         DLD     NUM(P2)         ;TEST FOR =
00058A  9C05              :         JNZ     NEQ1
00058C  40                :         LDE                     ;  EQUAL IF Z = 1
00058D  902B              :         JMP     CMP1
00058F  90B1              : X12:    JMP     XI1
000591  BAEB              : NEQ1:   DLD     NUM(P2)         ;TEST FOR <>
000593  9C05              :         JNZ     LSS1
000595  40                :         LDE                     ;  NOT EQUAL IF Z = 0
000596  E480              :         XRI     X'80

Portable National Semiconductor SC/MP Assembler [15.02]

000598  9020              :         JMP     CMP1
00059A  BAEB              : LSS1:   DLD     NUM(P2)         ;TEST FOR <
00059C  9C04              :         JNZ     LEQ1
00059E  C2EA              :         LD      TEMP(P2)        ;  LESS THAN IF (N XOR V)=l
0005A0  9018              :         JMP     CMP1
0005A2  BAEB              : LEQ1:   DLD     NUM(P2)         ;TEST FOR <=
0005A4  9C05              :         JNZ     GTR1
0005A6  40                :         LDE                     ;  LESS THAN OR EQUAL
0005A7  DAEA              :         OR      TEMP(P2)        ;   IF (Z OR (N XOR V))=l
0005A9  900F              :         JMP     CMP1
0005AB  BAEB              : GTR1:   DLD     NUM(P2)         ;TEST FOR >
0005AD  9C07              :         JNZ     GEQ1
0005AF  40                :         LDE                     ;  GREATER THAN
0005B0  DAEA              :         OR      TEMP(P2)        ;   IF (Z OR (N XOR V))=0
0005B2  E480              :         XRI     X'80
0005B4  9004              :         JMP     CMP1
0005B6  C2EA              : GEQ1:   LD      TEMP(P2)        ;GREATER THAN OR EQUAL
0005B8  E480              :         XRI     X'80            ;  IF (N XOR V)=0
0005BA  9404              : CMP1:   JP      FALSE1          ;IS RELATION SATISFIED?
0005BC  C401              :         LDI     1               ;YES - PUSH 1    ON STACK
0005BE  9002              :         JMP     CMP2
0005C0  C400              : FALSE1: LDI     0               ;N0 - PUSH 0 ON STACK
0005C2  CBFE              : CMP2:   ST      -2(P3)
0005C4  C400              :         LDI     0
0005C6  CBFF              :         ST      -1(P3)
                                    JS      P3,RTN          ;DO AN I. L.    RETURN
0005C8  C400              +         LDI     HI((RTN)-1)
0005CA  37                +         XPAH    P3
0005CB  C4F5              +         LDI     LO((RTN)-1)
0005CD  33                +         XPAL    P3
0005CE  3F                +         XPPC    P3
0005CF  90BE              :         JMP     X12
                            
                            
                            ;*************************************
                            ;*     IF STATEMENT TEST FOR ZERO    *
                            ;*************************************
                            
0005D1  C2EF              : CMPR:   LD      LOW(P2)         ;GET LOW & HI BYTES OF EXPR.
0005D3  DAEE              :         OR      HIGH(P2)        ;TEST IF EXPRESSION IS ZERO (LATER CHANGED TO 'ANI 01'(R.MARIN JAN 2008))
0005D5  9802              :         JZ      FAIL            ;YES - IT IS
0005D7  90B6              :         JMP     X12             ;N0 - IT ISN'T SO CONTINUE
0005D9  C501              : FAIL:   LD      @1(P1)          ;SKIP TO NEXT LINE IN PROGRAM
0005DB  E40D              :         XRI     X'0D            ;  (I.E.  TIL NEXT CR)
0005DD  9CFA              :         JNZ     FAIL
                                    JS      P3,NXT          ;CALL NXT AND RETURN
0005DF  C402              +         LDI     HI((NXT)-1)
0005E1  37                +         XPAH    P3
0005E2  C483              +         LDI     LO((NXT)-1)
0005E4  33                +         XPAL    P3
0005E5  3F                +         XPPC    P3
0005E6  90A7              : X12A:   JMP     X12
                            
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            ;*************************************
                            ;*         AND, OR, & NOT            *
                            ;*************************************
                            
0005E8  C401              : ANDOP:  LDI     1               ;EACH OPERATION HAS ITS
0005EA  9006              :         JMP     AON1            ;  OWN CASE SELECTOR.
0005EC  C402              : OROP:   LDI     2
0005EE  9002              :         JMP     AON1
0005F0  C403              : NOTOP:  LDI     3
0005F2  CAEB              : AON1:   ST      NUM(P2)
0005F4  C410              :         LDI     HI(AESTK)       ;SET P3 -> ARITH. STACK
0005F6  37                :         XPAH    P3
0005F7  BAFD              :         DLD     LSTK(P2)
0005F9  BAFD              :         DLD     LSTK(P2)
0005FB  33                :         XPAL    P3
0005FC  BAEB              :         DLD     NUM(P2)         ;TEST FOR  AND
0005FE  9C0E              :         JNZ     AON_0R
000600  C301              :         LD      1(P3)           ; REPLACE TWO TOP ITEMS ON
000602  D3FF              :         AND     -1(P3)          ;  STACK BY THEIR  AND
000604  CBFF              :         ST      -1(P3)
000606  C300              :         LD      0(P3)
000608  D3FE              :         AND     -2(P3)
00060A  CBFE              :         ST      -2(P3)
00060C  90D8              :         JMP     X12A
00060E  BAEB              : AON_0R: DLD     NUM(P2)         ;TEST FOR  OR
000610  9C0E              :         JNZ     AON_NT
000612  C301              :         LD      1(P3)           ;REPLACE TWO TOP ITEMS ON
000614  DBFF              :         OR      -1(P3)          ;  STACK BY THEIR 'OR'
000616  CBFF              :         ST      -1(P3)
000618  C300              :         LD      0(P3)
00061A  DBFE              :         OR      -2(P3)
00061C  CBFE              :         ST      -2(P3)
00061E  90C6              :         JMP     X12A
000620  C701              : AON_NT: LD      @1(P3)          ; NOT  OPERATION
000622  E4FF              :         XRI     X'FF
000624  CBFF              :         ST      -1(P3)          ; REPLACE TOP ITEM ON STACK
000626  C701              :         LD      @1(P3)          ;  BY ITS ONE'S COMPLEMENT
000628  E4FF              :         XRI     X'FF
00062A  CBFF              :         ST      -1(P3)
00062C  33                :         XPAL    P3
00062D  CAFD              :         ST      LSTK(P2)        ;STACK POINTER FIXUP
00062F  90B5              : X12B:   JMP     X12A
                            
                            
                            ;*************************************
                            ;*      EXCHANGE CURSOR WITH RAM     *
                            ;*************************************
                            
000631  C2F1              : XCHGP1: LD      P1L0W(P2)       ;THIS ROUTINE IS HANDY WHEN
000633  31                :         XPAL    P1              ;EXECUTING AN 'INPUT' STMT
000634  CAF1              :         ST      P1L0W(P2)       ;IT EXCHANGES THE CURRENT
000636  C2F0              :         LD      P1HIGH(P2)      ;TEXT CURSOR WITH ONE SAVED
000638  35                :         XPAH    P1              ;IN RAM
000639  CAF0              :         ST      P1HIGH(P2)

Portable National Semiconductor SC/MP Assembler [15.02]

00063B  3F                :         XPPC    P3
                            
                            
                            ;*************************************
                            ;*        CHECK RUN MODE             *
                            ;*************************************
                            
00063C  C2F4              : CKMODE: LD      RUNMOD(P2)      ;THIS ROUTINE CAUSES AN ERROR
00063E  9801              :         JZ      CK1             ;IF CURRENTLY IN EDIT MODE
000640  3F                :         XPPC    P3
000641  C403              : CK1:    LDI     3
000643  CAEB              : E8:     ST      NUM(P2)         ;ERROR IF RUN MODE = 0
                                    JS      P3,ERR2         ;MINOR KLUGE
000645  C402              +         LDI     HI((ERR2)-1)
000647  37                +         XPAH    P3
000648  C41E              +         LDI     LO((ERR2)-1)
00064A  33                +         XPAL    P3
00064B  3F                +         XPPC    P3
                            
                            
                            ;*************************************
                            ;*     GET  HEXADECIMAL NUMBER       *
                            ;*************************************
                            
00064C  AAFD              : HEX:    ILD     LSTK(P2)        ;POINT P3 AT ARITH STACK
00064E  AAFD              :         ILD     LSTK(P2)
000650  33                :         XPAL    P3
000651  C410              :         LDI     HI(AESTK)
000653  37                :         XPAH    P3
000654  C400              :         LDI     0               ;NUMBER INITIALLY ZERO
000656  CBFF              :         ST      -1(P3)          ;PUT IT ON STACK
000658  CBFE              :         ST      -2(P3)
00065A  CAEB              :         ST      NUM(P2)         ;ZERO NUMBER OF DIGITS
00065C  C501              : HSKIP:  LD      @1(P1)          ;SKIP ANY SPACES
00065E  E420              :         XRI     ' '
000660  98FA              :         JZ      HSKIP
000662  C5FF              :         LD      @-1(P1)
000664  C100              : LOOP7:  LD      (P1)            ;GET A CHARACTER
000666  03                :         SCL
000667  FC3A              :         CAI     '9'+1           ;CHECK FOR A NUMERIC CHAR
000669  9409              :         JP      HLETR
00066B  03                :         SCL
00066C  FCF6              :         CAI     '0'-'9'-1       ;IF NUMERIC, SHIFT NUMBER
00066E  9413              :         JP      HENTER          ;  AND ADD NEW HEX DIGIT
000670  9032              :         JMP     HEND
000672  90BB              : X12C:   JMP     X12B
000674  03                : HLETR:  SCL                     ;CHECK FOR HEX LETTER
000675  FC0D              :         CAI     'G'-'9'-1
000677  942B              :         JP      HEND
000679  03                :         SCL
00067A  FCFA              :         CAI     'A'-'G'
00067C  9402              :         JP      HX0K
00067E  9024              :         JMP     HEND
000680  02                : HX0K:   CCL                     ;ADD 10 TO GET TRUE VALUE

Portable National Semiconductor SC/MP Assembler [15.02]

000681  F40A              :         ADI     10              ;  OF LETTER
000683  01                : HENTER: XAE                     ;NEW DIGIT IN EX REG
000684  C404              :         LDI     4               ;SET SHIFT COUNTER
000686  CAEA              :         ST      TEMP(P2)
000688  CAEB              :         ST      NUM(P2)         ;DIGIT COUNT IS NON-ZERO
00068A  C3FE              : HSHIFT: LD      -2(P3)          ;SHIFT NUMBER LEFT BY 4
00068C  02                :         CCL
00068D  F3FE              :         ADD     -2(P3)
00068F  CBFE              :         ST      -2(P3)
000691  C3FF              :         LD      -1(P3)
000693  F3FF              :         ADD     -1(P3)
000695  CBFF              :         ST      -1(P3)
000697  BAEA              :         DLD     TEMP(P2)
000699  9CEF              :         JNZ     HSHIFT
00069B  C3FE              :         LD      -2(P3)          ;ADD NEW DIGIT
00069D  58                :         ORE                     ; INTO NUMBER
00069E  CBFE              :         ST      -2(P3)
0006A0  C501              :         LD      @1(P1)          ;ADVANCE THE CURSOR
0006A2  90C0              :         JMP     LOOP7           ;GET NEXT CHAR
0006A4  C2EB              : HEND:   LD      NUM(P2)         ;CHECK IF THERE WERE
0006A6  9C87              :         JNZ     X12B            ;MORE THAN 0 CHARACTERS
0006A8  C405              :         LDI     5               ;ERROR IF THERE WERE NONE
0006AA  9097              : E8B:    JMP     E8
                            
                            
                            ;*************************************
                            ;*      TEST FOR NUMBER IN TEXT      *
                            ;*************************************
                            
                            ;  THIS ROUTINE TESTS FOR A NUMBER IN THE TEXT.  IF  NO
                            ;  NUMBER IS FOUND, I.L. CONTROL PASSES TO THE ADDRESS
                            ;  INDICATED IN THE  'TSTN' INSTRUCTION. OTHERWISE, THE
                            ;  NUMBER IS SCANNED AND PUT ON THE ARITHMETIC STACK,
                            ;  WITH I.L. CONTROL PASSING TO THE NEXT INSTRUCTION.
                            
0006AC  C501              : TSTNUM: LD      @1(P1)
0006AE  E420              :         XRI     ' '             ;  SKIP OVER ANY SPACES
0006B0  98FA              :         JZ      TSTNUM
0006B2  C5FF              :         LD      @-1(P1)         ;GET FIRST CHAR
0006B4  03                :         SCL                     ;TEST FOR DIGIT
0006B5  FC3A              :         CAI     '9'+1
0006B7  9405              :         JP      TNABRT
0006B9  03                :         SCL
0006BA  FCF6              :         CAI     '0'-'9'-1
0006BC  9421              :         JP      TNL1
0006BE  C2FB              : TNABRT: LD      PCLOW(P2)       ;CET TEST-FAIL ADDRESS
0006C0  33                :         XPAL    P3              ;FROM   I. L. TABLE
0006C1  C2FA              :         LD      PCHIGH(P2)
0006C3  37                :         XPAH    P3
0006C4  C300              :         LD      (P3)            ;PUT TEST-FAIL ADDRESS
0006C6  CAFA              :         ST      PCHIGH(P2)      ;INTO   I. L. PC
0006C8  C301              :         LD      1(P3)
0006CA  CAFB              :         ST      PCLOW(P2)
0006CC  90A4              :         JMP     X12C

Portable National Semiconductor SC/MP Assembler [15.02]

0006CE  C402              : TNRET:  LDI     2               ;SKIP OVER ONE IL INSTRUCTION
0006D0  02                :         CCL                     ;IF NUMBER IS DONE
0006D1  F2FB              :         ADD     PCLOW(P2)
0006D3  CAFB              :         ST      PCLOW(P2)
0006D5  C400              :         LDI     0
0006D7  F2FA              :         ADD     PCHIGH(P2)
0006D9  CAFA              :         ST      PCHIGH(P2)
0006DB  9095              : X13:    JMP     X12C
0006DD  90CB              : ESA:    JMP     E8B
0006DF  01                : TNL1:   XAE                     ;SAVE DIGIT IN   EX  REG
0006E0  C410              :         LDI     HI(AESTK)       ;POINT  P3 AT AE STACK
0006E2  37                :         XPAH    P3
0006E3  AAFD              :         ILD     LSTK(P2)
0006E5  AAFD              :         ILD     LSTK(P2)
0006E7  33                :         XPAL    P3
0006E8  C400              :         LDI     0
0006EA  CBFF              :         ST      -1(P3)
0006EC  40                :         LDE
0006ED  CBFE              :         ST      -2(P3)
0006EF  C501              : LOOP8:  LD      @1(P1)          ;GET NEXT  CHAR
0006F1  C100              :         LD      (P1)
0006F3  03                :         SCL                     ;TEST IF IT IS DIGIT
0006F4  FC3A              :         CAI     '9'+1
0006F6  94D6              :         JP      TNRET           ;RETURN  IF IT ISN'T
0006F8  03                :         SCL
0006F9  FCF6              :         CAI     '0'-'9'-1
0006FB  9402              :         JP      TNL2
0006FD  90CF              :         JMP     TNRET
0006FF  01                : TNL2:   XAE                     ;SAVE DIGIT
000700  C3FF              :         LD      -1(P3)          ;PUT RESULT IN SCRATCH SPACE
000702  CB01              :         ST      1(P3)
000704  C3FE              :         LD      -2(P3)
000706  CB00              :         ST      (P3)
000708  C402              :         LDI     2
00070A  CAEA              :         ST      TEMP(P2)        ;MULTIPLY RESULT BY 10
00070C  02                : TNSHFT: CCL                     ;FIRST MULTIPLY BY 4
00070D  C3FE              :         LD      -2(P3)
00070F  F3FE              :         ADD     -2(P3)
000711  CBFE              :         ST      -2(P3)
000713  C3FF              :         LD      -1(P3)
000715  F3FF              :         ADD     -1(P3)
000717  CBFF              :         ST      -1(P3)
000719  D480              :         ANI     X'80            ; MAKE SURE N0 OVERFLOW
00071B  9C34              :         JNZ     TNERR           ;  OCCURRED
00071D  BAEA              :         DLD     TEMP(P2)
00071F  9CEB              :         JNZ     TNSHFT
000721  02                :         CCL                     ;THEN ADD OLD RESULT,
000722  C3FE              :         LD      -2(P3)          ;  SO WE HAVE RESULT * 5
000724  F300              :         ADD     (P3)
000726  CBFE              :         ST      -2(P3)
000728  C3FF              :         LD      -1(P3)
00072A  F301              :         ADD     1(P3)
00072C  CBFF              :         ST      -1(P3)
00072E  D480              :         ANI     X'80            ;MAKE SURE NO OVERFLOW

Portable National Semiconductor SC/MP Assembler [15.02]

000730  9C1F              :         JNZ     TNERR           ;  OCCURRED
000732  02                :         CCL                     ;THEN MULTIPLY, BY TWO
000733  C3FE              :         LD      -2(P3)
000735  F3FE              :         ADD     -2(P3)
000737  CBFE              :         ST      -2(P3)
000739  C3FF              :         LD      -1(P3)
00073B  F3FF              :         ADD     -1(P3)
00073D  CBFF              :         ST      -1(P3)
00073F  D480              :         ANI     X'80            ;MAKE SURE NO OVERFLOW
000741  9C0E              :         JNZ     TNERR           ;  OCCURRED
000743  02                :         CCL                     ;THEN ADD IN NEW DIGIT
000744  40                :         LDE
000745  F3FE              :         ADD     -2(P3)
000747  CBFE              :         ST      -2(P3)
000749  C400              :         LDI     0
00074B  F3FF              :         ADD     -1(P3)
00074D  CBFF              :         ST      -1(P3)
00074F  949E              :         JP      LOOP8           ;REPEAT IF NO OVERFLOW
000751  C406              : TNERR:  LDI     6
000753  9088              : E9:     JMP     ESA             ;ELSE REPORT ERROR
000755  9084              : X14:    JMP     X13
                            
                            
                            ;*************************************
                            ;*      GET LINE  FROM TELETYPE      *
                            ;*************************************
                            
                            GETL:   LDPI    P1,LBUF         ;SET P1 TO LBUF
000757  C410              +         LDI     HI(LBUF)
000759  35                +         XPAH    P1
00075A  C4D6              +         LDI     LO(LBUF)
00075C  31                +         XPAL    P1
00075D  C400              :         LDI     0               ;CLEAR NO.  OF CHAR
00075F  CAE7              :         ST      CHRNUM(P2)
                                    LDPI    P3,PUTC-1       ;POINT P3 AT PUTC ROUTINE
000761  C40F              +         LDI     HI(PUTC-1)
000763  37                +         XPAH    P3
000764  C49D              +         LDI     LO(PUTC-1)
000766  33                +         XPAL    P3
000767  C2F4              :         LD      RUNMOD(P2)      ;PRINT  '? '  IF RUNNING
000769  9808              :         JZ      GETL0           ;  (I.E. DURING 'INPUT')
00076B  C43F              :         LDI     '?'
00076D  3F                :         XPPC     P3
00076E  C420              :         LDI     ' '
000770  3F                :         XPPC    P3
000771  9003              :         JMP     GETL1
000773  C43E              : GETL0:  LDI     '>'             ; OTHERWISE PRINT '>'
000775  3F                :         XPPC    P3
                            GETL1:  JS      P3,GECO         ;GET CHARACTER
000776  C40F              +         LDI     HI((GECO)-1)
000778  37                +         XPAH    P3
000779  C471              +         LDI     LO((GECO)-1)
00077B  33                +         XPAL    P3
00077C  3F                +         XPPC    P3

Portable National Semiconductor SC/MP Assembler [15.02]

00077D  C49D              :         LDI     LO(PUTC)-1      ; POINT PS AT PUTC AGAIN
00077F  33                :         XPAL    P3
000780  40                :         LDE                     ;GET TYPED CHAR
000781  98F3              :         JZ      GETL1           ; IGNORE NULLS
000783  E40A              :         XRI     X'0A            ; IGNORE LINE FEED
000785  98EF              :         JZ      GETL1
000787  40                :         LDE
000788  E40D              :         XRI     X'0D            ; CHECK FOR CR
00078A  984B              :         JZ      GETLCR
                                    .if     !EM_SCMP
                          -         LDE
                          -         XRI     'O'+X'10        ; CHECK FOR SHIFT/0
                          -         JZ      GETRUB
                                    .endif
00078C  40                :         LDE                     ;CHECK FOR CTRL/H
00078D  E408              :         XRI     8
00078F  9836              :         JZ      GXH
000791  40                :         LDE
000792  E415              :         XRI     X'15            ;CHECK FOR CTRL/U
000794  980F              :         JZ      GXU
000796  40                :         LDE
000797  E403              :         XRI     3               ;CHECK FOR CTRL/C
000799  9C1A              :         JNZ     GENTR
00079B  C45E              :         LDI     '^'             ;ECHO CONTROL/C AS ^C
00079D  3F                :         XPPC    P3
00079E  C443              :         LDI     'C'
0007A0  3F                :         XPPC    P3
0007A1  C40E              :         LDI     14              ; CAUSE A BREAK
0007A3  90AE              :         JMP     E9
0007A5  C45E              : GXU:    LDI     '^'             ;ECHO CONTROL/U AS ^U
0007A7  3F                :         XPPC    P3
0007A8  C455              :         LDI     'U'
0007AA  3F                :         XPPC    P3
0007AB  C40D              :         LDI     X'0D            ; PRINT CR/LF
0007AD  3F                :         XPPC    P3
0007AE  C40A              :         LDI     X'0A
0007B0  3F                :         XPPC    P3
0007B1  90A4              :         JMP     GETL            ; G0 GET ANOTHER LINE
0007B3  90A0              : X15:    JMP     X14
0007B5  40                : GENTR:  LDE
0007B6  CD01              :         ST      @1(P1)          ;PUT CHAR IN LBUF
0007B8  AAE7              :         ILD     CHRNUM(P2)      ; INCREMENT CHRNUM
0007BA  E448              :         XRI     72              ;IF=72,  LINE FULL
0007BC  9CB8              :         JNZ     GETL1
0007BE  C40D              :         LDI     X'0D
0007C0  01                :         XAE                     ;SAVE CARRIAGE RET
0007C1  40                :         LDE
0007C2  3F                :         XPPC    P3              ; PRINT IT
0007C3  9012              :         JMP     GETLCR          ; STORE IT IN LBUF
0007C5  908C              : E10:    JMP     E9
0007C7  C420              : GXH:    LDI     ' '             ; BLANK OUT THE CHARACTER
0007C9  3F                :         XPPC    P3
0007CA  C408              :         LDI     8               ; PRINT ANOTHER BACKSPACE
0007CC  3F                :         XPPC    P3

Portable National Semiconductor SC/MP Assembler [15.02]

0007CD  C2E7              : GETRUB: LD      CHRNUM(P2)
0007CF  98A5              :         JZ      GETL1
0007D1  BAE7              :         DLD     CHRNUM(P2)      ;0NE LESS CHAR
0007D3  C5FF              :         LD      @-1(P1)         ;BACKSPACE CURSOR
0007D5  909F              :         JMP     GETL1
0007D7  40                : GETLCR: LDE
0007D8  CD01              :         ST      @1(P1)          ;STORE CR IN LBUF
0007DA  C40A              :         LDI     X'0A            ;PRINT LINE FEED
0007DC  3F                :         XPPC    P3
0007DD  C410              :         LDI     HI(LBUF)        ;SET P1 TO BEGIN-
0007DF  35                :         XPAH    P1              ;  NING OF LBUF
0007E0  C4D6              :         LDI     LO(LBUF)
0007E2  31                :         XPAL    P1
0007E3  90CE              : X16:    JMP     X15
                            
                            
                            ;*************************************
                            ;*     EVAL -- GET MEMORY CONTENTS   *
                            ;*************************************
                            
                             ;  THIS ROUTINE IMPLEMENTS THE  '@' OPERATOR IN EXPRESSIONS
                            
0007E5  C410              : EVAL:   LDI     HI(AESTK)
0007E7  37                :         XPAH    P3
0007E8  C2FD              :         LD      LSTK(P2)
0007EA  33                :         XPAL    P3              ; P3 -> ARITH STACK
0007EB  C3FF              :         LD      -1(P3)          ; GET ADDR OFF STACK,
0007ED  35                :         XPAH    P1              ;  AND INTO P1,
0007EE  01                :         XAE                     ;  SAVING OLD P1 IN  EX & LO
0007EF  C3FE              :         LD      -2(P3)
0007F1  31                :         XPAL    P1
0007F2  CAEF              :         ST      LOW(P2)
0007F4  C100              :         LD      0(P1)           ;GET MEMORY CONTENTS,
0007F6  CBFE              :         ST      -2(P3)          ;  SHOVE ONTO STACK
0007F8  C400              :         LDI     0
0007FA  CBFF              :         ST      -1(P3)          ;HIGH ORDER 3 BITS  ZEROED
0007FC  C2EF              :         LD      LOW(P2)
0007FE  31                :         XPAL    P1              ;RESTORE ORIGINAL P1
0007FF  40                :         LDE
000800  35                :         XPAH    P1
000801  90B0              :         JMP     X15
                            
                            
                            ;*************************************
                            ;*    MOVE - STORE INTO MEMORY       *
                            ;*************************************
                            
                            ;  THIS ROUTINE IMPLEMENTS THE STATEMENT:
                            ;      '@'  FACTOR  '='  REL-EXP
                            
000803  C410              : MOVE:   LDI     HI(AESTK)
000805  37                :         XPAH    P3
000806  C2FD              :         LD      LSTK(P2)
000808  33                :         XPAL    P3              ;P3 -> ARITH STACK

Portable National Semiconductor SC/MP Assembler [15.02]

000809  C7FE              :         LD      @-2(P3)         ;GET BYTE  TO  BE MOVED
00080B  01                :         XAE
00080C  C7FF              :         LD      @-1(P3)         ;NOW GET ADDRESS INTO P3
00080E  CAEA              :         ST      TEMP(P2)
000810  C7FF              :         LD      @-1(P3)
000812  33                :         XPAL    P3
000813  CAFD              :         ST      LSTK(P2)        ;STACK PTR UPDATED NOW
000815  C2EA              :         LD      TEMP(P2)
000817  37                :         XPAH    P3
000818  40                :         LDE
000819  CB00              :         ST      0(P3)           ;MOVE THE  BYTE INTO MEMORY
00081B  90C6              : X17:    JMP     X16
00081D  90A6              : Ell:    JMP     E10
                            
                            ;*************************************
                            ;*            TEXT EDITOR            *
                            ;*************************************
                            
                            ;INPUTS TO THIS ROUTINE: POINTER TO LINE BUFFER IN P1L0W &
                            ;  P1HIGH.   P1 POINTS TO THE INSERTION POINT IN THE TEXT.
                            ;  THE A.E.  STACK HAS THE LINE NUMBER ON IT (STACK POINTER
                            ;  IS ALREADY POPPED).
                            
                            ; EACH LINE IN THE NIBL TEXT IS STORED IN THE  FOLLOWING
                            ;  FORMAT:  TWO BYTES CONTAINING THE LINE NUMBER (IN BINARY,
                            ;  HIGH ORDER BYTE FIRST),  THEN ONE BYTE CONTAINING THE
                            ;  LENGTH OF THE LINE., AND FINALLY THE LINE ITSELF FOLLOWED
                            ;  BY A CARRIAGE RETURN.   THE LAST LINE IN  THE TEXT IS
                            ;  FOLLOWED BY TWO CONSECUTIVE BYTES OF XFF.
                            
00081F  C410              : INSRT:  LDI     HI(AESTK)       ;POINT P3  AT   AE STACK,
000821  37                :         XPAH    P3              ;WHICH HAS THE LINE #
000822  C2FD              :         LD      LSTK(P2)        ;ON IT
000824  33                :         XPAL    P3
000825  C301              :         LD      1(P3)           ;SAVE NEW  LINE'S NUMBER
000827  CAF7              :         ST      HILINE(P2)
000829  C300              :         LD      0(P3)
00082B  CAF8              :         ST      LOLINE(P2)
00082D  C2F1              :         LD      P1L0W(P2)       ;PUT POINTER  TO LBUF INTO P3
00082F  33                :         XPAL    P3
000830  C2F0              :         LD      P1HIGH(P2)
000832  37                :         XPAH    P3
000833  C404              :         LDI     4               ;INITIALLY LENGTH OF NEW LINE
000835  CAE7              :         ST      CHRNUM(P2)      ;  = 4.  ADD 1  TO LENGTH FOR
000837  C701              : INSRT1: LD      @1(P3)          ;  EACH CHAR IN LINE UP TO,
000839  E40D              :         XRI     X'0D            ;  BUT NOT  INCLUDING,
00083B  9804              :         JZ      INSRT2          ;  CARRIAGE RETURN
00083D  AAE7              :         ILD     CHRNUM(P2)
00083F  90F6              :         JMP     INSRT1
000841  C2E7              : INSRT2: LD      CHRNUM(P2)      ; IF LENGTH STILL 4,
000843  E404              :         XRI     4               ;  WE'LL DELETE A LINE,
000845  9C02              :         JNZ     INSRT3          ;  SO SET LENGTH = 0
000847  CAE7              :         ST      CHRNUM(P2)
000849  C2E7              : INSRT3: LD      CHRNUM(P2)      ;PUT NEW LINE LENGTH IN EX

Portable National Semiconductor SC/MP Assembler [15.02]

00084B  01                :         XAE
00084C  C2F2              :         LD      LABLHI(P2)      ; IS NEW LINE REPLACING OLD?
00084E  9406              :         JP      INSRT4          ;YES - DO REPLACE
000850  D47F              :         ANI     X'7F            ;N0 - WE'LL INSERT LINE HERE,
000852  CAF2              :         ST      LABLHI(P2)      ;  WHERE FNDLBL GOT US
000854  9018              :         JMP     AMOVE           ;BUT FIR3T MAKE ROOM
000856  C503              : INSRT4: LD      @3(P1)          ;SKIP LINE # AND LENGTH
000858  40                :         LDE                     ;EX,  NOW HOLDING NEW LINE
000859  02                :         CCL                     ;  LENGTH,  WILL SOON HOLD
00085A  F4FC              :         ADI     -4              ;  DISPLACEMENT OF LINES
00085C  01                :         XAE                     ;  TO BE MOVED
00085D  C501              : INSRT5: LD      @1(P1)          ;SUBTRACT 1 FROM DISPLACEMENT
00085F  E40D              :         XRI     X'0D            ;  FOR EACH CHAR IN LINE BEING
000861  980B              :         JZ      AMOVE           ;  REPLACED
000863  40                :         LDE
000864  02                :         CCL
000865  F4FF              :         ADI     -1
000867  01                :         XAE
000868  90F3              :         JMP     INSRT5
00086A  90AF              : X19:    JMP     X17
00086C  90AF              : E12:    JMP     Ell
00086E  40                : AMOVE:  LDE                     ;IF DISPLACEMENT AND LENGTH
00086F  DAE7              :         OR      CHRNUM(P2)      ;  OF NEW LINE ARE 0,    RETURN
000871  98F7              :         JZ      X19
000873  C47A              :         LDI     LO(DOSTAK)      ; CLEAR SOME STACKS
000875  CAFF              :         ST      DOPTR(P2)
000877  C46A              :         LDI     LO(SBRSTK)
000879  CAFC              :         ST      SBRPTR(P2)
00087B  C48A              :         LDI     LO(FORSTK)
00087D  CAFE              :         ST      FORPTR(P2)
00087F  40                :         LDE
000880  9860              :         JZ      INSAD0          ;DON'T NEED TO MOVE LINES
000882  9410              :         JP      INSUP0          ;SKIP IF DISP.  POSITIVE
000884  C100              : ADOWN:  LD      0(P1)           ; NEGATIVE DISPLACEMENT:
000886  C980              :         ST      EREG(P1)        ;DO;
000888  C501              :         LD      @1(P1)          ;    M(P1+DISP)  = M(P1);
00088A  94F8              :         JP      ADOWN           ;    P1 = Pl+1;
00088C  C100              :         LD      0(P1)           ;UNTIL M(P1)<0 & M(P1-1)<0;
00088E  94F4              :         JP      ADOWN
000890  C980              :         ST      EREG(P1)        ;M(P1+DISP) = M(P1);
000892  904E              :         JMP     INSAD0
000894  C1FE              : INSUP0: LD      -2(P1)          ;POSITIVE DISPLACEMENT:
000896  CAEA              :         ST      TEMP(P2)        ;FLAG BEGINNING OF MOVE WITH
000898  C4FF              :         LDI     -1              ;  A -1 FOLLOWED BY 30,  WHICH
00089A  C9FE              :         ST      -2(P1)          ;  CAN NEVER APPEAR IN A
00089C  C450              :         LDI     80              ;  NIBL TEXT
00089E  C9FF              :         ST      -1(P1)
0008A0  C501              : INSUP1: LD      @1(P1)          ; ADVANCE P1 TO END OF TEXT
0008A2  94FC              :         JP      INSUP1
0008A4  C100              :         LD      0(P1)
0008A6  94F8              :         JP      INSUP1
0008A8  35                :         XPAH    P1              ;SAVE P1 IN LO, HI
0008A9  CAEE              :         ST      HIGH(P2)
0008AB  35                :         XPAH    P1

Portable National Semiconductor SC/MP Assembler [15.02]

0008AC  31                :         XPAL    P1
0008AD  CAEF              :         ST      LOW(P2)
0008AF  31                :         XPAL    P1
0008B0  C2EF              :         LD      LOW(P2)         ;ADD DISPLACEMENT TO
0008B2  02                :         CCL                     ;VALUE OF P1, TO CHECK
0008B3  70                :         ADE                     ;WHETHER WE'RE OUT OF
0008B4  C400              :         LDI     0               ;RAM FOR USER'S PROGRAM
0008B6  F2EE              :         ADD     HIGH(P2)
0008B8  E2EE              :         XOR     HIGH(P2)
0008BA  D4F0              :         ANI     X'F0
0008BC  9803              :         JZ      INSUP2
0008BE  C400              :         LDI     0               ;IF OUT OF RAM,  CHANGE
0008C0  01                :         XAE                     ;  DISPLACEMENT TO ZERO
0008C1  C4FF              : INSUP2: LDI     -1
0008C3  C980              : INSUP3: ST      EREG(P1)        ;MOVE TEXT UP UNTIL WE REACH
0008C5  C5FF              :         LD      @-1(P1)         ;  THE FLAGS SET ABOVE
0008C7  94FA              :         JP      INSUP3
0008C9  C101              :         LD      1(P1)
0008CB  E450              :         XRI     80
0008CD  9804              :         JZ      INSUP4
0008CF  C100              :         LD      0(P1)
0008D1  90F0              :         JMP     INSUP3
0008D3  C2EA              : INSUP4: LD      TEMP(P2)        ;RESTORE THE FLAGGED LOCATION
0008D5  C900              :         ST      0(P1)           ;  TO THEIR ORIGINAL VALUES
0008D7  C40D              :         LDI     X'0D
0008D9  C901              :         ST      1(P1)
0008DB  40                :         LDE                     ;IF DISPLACEMENT = 0,  WE'RE
0008DC  9C04              :         JNZ     INSAD0          ;  OUT OF RAM,  SO REPORT ERROR
0008DE  C402              :         LDI     2
0008E0  908A              : E12A:   JMP     E12
0008E2  C2E7              : INSAD0: LD      CHRNUM(P2)      ;INSERT NEW LINE
0008E4  9884              : X19A:   JZ      X19             ;  UNLESS LENGTH IS ZERO
0008E6  C2F1              :         LD      P1L0W(P2)       ;POINT P1 AT LINE BUFFER
0008E8  31                :         XPAL    P1
0008E9  C2F0              :         LD      P1HIGH(P2)
0008EB  35                :         XPAH    P1
0008EC  C2F3              :         LD      LABLLO(P2)      ;POINT P3 AT INSERTION PLACE
0008EE  33                :         XPAL    P3
0008EF  C2F2              :         LD      LABLHI(P2)
0008F1  37                :         XPAH    P3
0008F2  C2F7              :         LD      HILINE(P2)      ;PUT LINE NUMBER INTO TEXT
0008F4  CF01              :         ST      @1(P3)
0008F6  C2F8              :         LD      LOLINE(P2)
0008F8  CF01              :         ST      @1(P3)
0008FA  C2E7              :         LD      CHRNUM(P2)      ;STORE LINE LENGTH IN TEXT
0008FC  CF01              :         ST      @1(P3)
0008FE  C501              : INSAD1: LD      @1(P1)          ;PUT REST OF CHARS
000900  CF01              :         ST      @1(P3)          ;  (INCLUDING OR)  INTO TEXT
000902  E40D              :         XRI     X'0D
000904  9CF8              :         JNZ     INSAD1
000906  90DC              :         JMP     X19A            ;RETURN
                            X20:    JS      P3,EXECIL
000908  C400              +         LDI     HI((EXECIL)-1)
00090A  37                +         XPAH    P3

Portable National Semiconductor SC/MP Assembler [15.02]

00090B  C475              +         LDI     LO((EXECIL)-1)
00090D  33                +         XPAL    P3
00090E  3F                +         XPPC    P3
00090F  90CF              : E13:    JMP     E12A
                            
                            
                            ;************************************
                            ;*       POP ARITHMETIC STACK       *
                            ;************************************
                            
000911  BAFD              : POPAE:  DLD     LSTK(P2)        ;THIS ROUTINE POP  THE  A. E.
000913  BAFD              :         DLD     LSTK(P2)        ;STACK, AND PUTS  THE  RESULT
000915  33                :         XPAL    P3              ;INTO  LO(P2) AND  HI(P2)
000916  C410              :         LDI     HI(AESTK)
000918  37                :         XPAH    P3
000919  C300              :         LD      (P3)
00091B  CAEF              :         ST      LOW(P2)
00091D  C301              :         LD      1(P3)
00091F  CAEE              :         ST      HIGH(P2)
000921  90E5              :         JMP     X20
                            
                            
                            ;*************************************
                            ;*              UNTIL                *
                            ;*************************************
                            
000923  C2FF              : UNTIL:  LD      DOPTR(P2)       ; CHECK  FOR DO-STACK  UNDERFLOW
000925  01                :         XAE
000926  40                :         LDE
000927  E47A              :         XRI     LO(DOSTAK)
000929  9C04              :         JNZ     UNTL1
00092B  C40F              :         LDI     15
00092D  90E0              :         JMP     E13
00092F  C2EF              : UNTL1:  LD      LOW(P2)         ; CHECK  FOR EXPRESSION  = 0
000931  DAEE              :         OR      HIGH(P2)        ;<- CHANGED AFTER 12/17/76 TO 'ANI 01' (R.MARIN, JAN 2008)
000933  9806              :         JZ      SREDO           ;IF ZERO, REPEAT DO-LOOP
000935  BAFF              :         DLD     DOPTR(P2)       ;ELSE POP SAVE STACK
000937  BAFF              :         DLD     DOPTR(P2)
000939  90CD              :         JMP     X20             ;CONTINUE TO NEXT  STMT
00093B  40                : SREDO:  LDE                     ; POINT  P3 AT DO-STACK
00093C  33                :         XPAL    P3
00093D  C410              :         LDI     HI(DOSTAK)
00093F  37                :         XPAH    P3
000940  C3FF              :         LD      -1(P3)          ;LOAD P1 FROM DO STACK
000942  35                :         XPAH    P1
000943  C3FE              :         LD      -2(P3)
000945  31                :         XPAL    P1              ; CURSOR NOW POINTS TO  FIRST
000946  90C0              :         JMP     X20             ;  STATEMENT OF DO-LOOP
                            
                            ;*************************************
                            ;*     STORE INTO STATUS REGISTER    *
                            ;*************************************
                            
                            ; THIS ROUTINE IMPLEMENTS THE STATEMENT:

Portable National Semiconductor SC/MP Assembler [15.02]

                            ;      'STAT' '='  REL-EXP
                            
000948  C2EF              : MOVESR: LD      LOW(P2)         ;LOW BYTE GOES TO STATUS
00094A  D4F7              :         ANI     X'F7            ;  BUT WITH IEN BIT CLEARED
00094C  07                :         CAS
00094D  90B9              : X21:    JMP     X20
00094F  90BE              : E14:    JMP     E13
                            
                            
                            ;*************************************
                            ;*         STAT FUNCTION             *
                            ;*************************************
                            
000951  C410              : STATUS: LDI     HI(AESTK)
000953  37                :         XPAH    P3              ;POINT P3 AT AE STACK
000954  AAFD              :         ILD     LSTK(P2)
000956  AAFD              :         ILD     LSTK(P2)
000958  33                :         XPAL    P3
000959  06                :         CSA
00095A  CBFE              :         ST      -2(P3)          ;STATUS REG IS, LOW BYTE
00095C  C400              :         LDI     0
00095E  CBFF              :         ST      -1(P3)          ;ZERO IS HIGH BYTE
000960  90EB              :         JMP     X21
                            
                            
                            ;*************************************
                            ;*    MACHINE LANGUAGE SUBROUTINE    *
                            ;*************************************
                            
                            ;  THIS ROUTINE IMPLEMENTS THE 'LINK' STATEMENT
                            
000962  C2EE              : CALLML: LD      HIGH(P2)        ;GET HIGH BYTE OF ADDRESS
000964  37                :         XPAH    P3
000965  C2EF              :         LD      LOW(P2)         ;GET LOW BYTE
000967  33                :         XPAL    P3              ;P3 -> USER'S ROUTINE
000968  C7FF              :         LD      @-1(P3)         ;CORRECT P3
00096A  3F                :         XPPC    P3              ;CALL ROUTINE (PRAY IT WORKS)
                                    LDPI    P2,VARS         ;RESTORE RAM POINTER
00096B  C410              +         LDI     HI(VARS)
00096D  36                +         XPAH    P2
00096E  C41C              +         LDI     LO(VARS)
000970  32                +         XPAL    P2
000971  90DA              :         JMP     X21             ;RETURN
                            
                            
                            ;*************************************
                            ;*        SAVE DO LOOP ADDRESS       *
                            ;*************************************
                            
                            ;  THIS ROUTINE IMPLEMENTS THE 'DO' STATEMENT.
                            
000973  C2FF              : SAVEDO: LD      DOPTR(P2)       ;CHECK FOR STACK OVERFLOW
000975  E48A              :         XRI     LO(FORSTK)
000977  9C04              :         JNZ     SVDO1

Portable National Semiconductor SC/MP Assembler [15.02]

000979  C40A              :         LDI     10
00097B  90D2              : E15:    JMP     E14
00097D  AAFF              : SVDO1:  ILD     DOPTR(P2)
00097F  AAFF              :         ILD     DOPTR(P2)
000981  33                :         XPAL    P3
000982  C410              :         LDI     HI(DOSTAK)
000984  37                :         XPAH    P3              ;P3 -> TOP OF DO STACK
000985  35                :         XPAH    P1              ;SAVE CURSOR ON THE STACK
000986  CBFF              :         ST      -1(P3)
000988  35                :         XPAH    P1
000989  31                :         XPAL    P1
00098A  CBFE              :         ST      -2(P3)
00098C  31                :         XPAL    P1
00098D  90BE              : X22:    JMP     X21
                            
                            
                            ;*************************************
                            ;*        TOP OF RAM FUNCTION        *
                            ;*************************************
                            
00098F  C2E9              : TOP:    LD      TEMP2(P2)       ;SET P3 TO POINT TO
000991  37                :         XPAH    P3              ;  START OF NIBL TEXT
000992  C2E8              :         LD      TEMP3(P2)
000994  33                :         XPAL    P3
000995  C300              : TOP0:   LD      (P3)            ;HAVE WE HIT END OF TEXT?
000997  9402              :         JP      TOP1            ; NO - SKIP TO NEXT LINE
000999  9007              :         JMP     TOP2            ; YES - PUT CURSOR ON STACK
00099B  C302              : TOP1:   LD      2(P3)           ;GET LENGTH OF LINE
00099D  01                :         XAE
00099E  C780              :         LD      @EREG(P3)       ;SKIP TO NEXT LINE
0009A0  90F3              :         JMP     TOP0            ; GO CHECK FOR EOF
0009A2  C702              : TOP2:   LD      @2(P3)          ; P3 := P3 + 2
0009A4  AAFD              :         ILD     LSTK(P2)        ;SET PS TO STACK,  SAVING
0009A6  AAFD              :         ILD     LSTK(P2)        ;  OLD P3 (WHICH CONTAINS TOP)
0009A8  33                :         XPAL    P3              ;  ON IT SOMEHOW
0009A9  01                :         XAE
0009AA  C410              :         LDI     HI(AESTK)
0009AC  37                :         XPAH    P3
0009AD  CBFF              :         ST      -1(P3)
0009AF  40                :         LDE
0009B0  CBFE              :         ST      -2(P3)
0009B2  90D9              :         JMP     X22
                            
                            
                            ;*************************************
                            ;*       SKIP TO NEXT NIBL LINE      *
                            ;*************************************
                            
0009B4  C501              : IGNORE: LD      @1(P1)          ;SCAN TIL WE'RE PAST
0009B6  E40D              :         XRI     X'0D            ; CARRIAGE RETURN
0009B8  9CFA              :         JNZ     IGNORE
0009BA  3F                :         XPPC    P3
                            
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            ;*************************************
                            ;*          MODULO FUNCTION          *
                            ;*************************************
                            
0009BB  C2FD              : MODULO: LD      LSTK(P2)        ;THIS ROUTINE MUST  BE
0009BD  33                :         XPAL    P3              ;  IMMEDIATELY AFTER A
0009BE  C410              :         LDI     HI(AESTK)       ;  DIVIDE TO WORK CORRECTLY
0009C0  37                :         XPAH    P3
0009C1  C303              :         LD      3(P3)           ;GET LOW BYTE OF REMAINDER
0009C3  CBFE              :         ST      -2(P3)          ;PUT ON STACK
0009C5  C302              :         LD      2(P3)           ;GET HIGH  BYTE  OF REMAINDER
0009C7  CBFF              :         ST      -1(P3)          ;PUT ON STACK
0009C9  90C2              : X23:    JMP     X22
0009CB  90AE              : E16:    JMP     E15
                            
                            
                            ;*************************************
                            ;*          RANDOM FUNCTION          *
                            ;*************************************
                            
0009CD  C408              : RANDOM: LDI     8               ;LOOP COUNTER FOR MULTIPLY
0009CF  CAEB              :         ST      NUM(P2)
0009D1  C2E5              :         LD      RNDX(P2)
0009D3  01                :         XAE
0009D4  C2E4              :         LD      RNDY(P2)
0009D6  CAE9              :         ST      TEMP2(P2)
0009D8  C2E5              : LOOP9:  LD      RNDX(P2)        ;MULTIPLY  THE SEEDS BY 9
0009DA  02                :         CCL
0009DB  70                :         ADE
0009DC  01                :         XAE
0009DD  C2E4              :         LD      RNDY(P2)
0009DF  02                :         CCL
0009E0  F2E9              :         ADD     TEMP2(P2)
0009E2  CAE4              :         ST      RNDY(P2)
0009E4  BAEB              :         DLD     NUM(P2)
0009E6  9CF0              :         JNZ     LOOP9
0009E8  40                :         LDE                     ;ADD 7 TO  SEEDS
0009E9  02                :         CCL
0009EA  F407              :         ADI     7
0009EC  01                :         XAE
0009ED  C2E4              :         LD      RNDY(P2)
0009EF  02                :         CCL
0009F0  F407              :         ADI     7
0009F2  1E                :         RR
0009F3  CAE4              :         ST      RNDY(P2)
0009F5  AAE6              :         ILD     RNDF(P2)        ;HAVE WE GONE THROUGH
0009F7  9803              :         JZ      RND1            ;  256 GENERATIONS?
0009F9  40                :         LDE                     ;IF SO,  SKIP GENERATING
0009FA  CAE5              :         ST      RNDX(P2)        ;  THE NEW  RNDX
0009FC  C2FD              : RND1:   LD      LSTK(P2)        ;START MESSING WITH THE STACK
0009FE  33                :         XPAL    P3
0009FF  C410              :         LDI     HI(AESTK)
000A01  37                :         XPAH    P3
000A02  C401              :         LDI     1               ;FIRST PUT 1 ON STACK

Portable National Semiconductor SC/MP Assembler [15.02]

000A04  CB00              :         ST      (P3)
000A06  C400              :         LDI     0
000A08  CB01              :         ST      1(P3)
000A0A  C3FE              :         LD      -2(P3)          ;PUT EXPR2 ON STACK
000A0C  CB02              :         ST      2(P3)
000A0E  C3FF              :         LD      -1(P3)
000A10  CB03              :         ST      3(P3)
000A12  C3FC              :         LD      -4(P3)          ;PUT EXPR1 ON STACK
000A14  CB04              :         ST      4(P3)
000A16  C3FD              :         LD      -3(P3)
000A18  CB05              :         ST      5(P3)
000A1A  C2E4              :         LD      RNDY(P2)        ;PUT RANDOM # ON STACK
000A1C  CBFE              :         ST      -2(P3)
000A1E  C2E5              :         LD      RNDX(P2)
000A20  E4FF              :         XRI     X'FF
000A22  D47F              :         ANI     X'7F
000A24  CBFF              :         ST      -1(P3)
000A26  C706              :         LD      @6(P3)          ; ADD 6 TO STACK POINTER
000A28  33                :         XPAL    P3
000A29  CAFD              :         ST      LSTK(P2)
000A2B  909C              : X24:    JMP     X23
000A2D  909C              : E16A:   JMP     E16
                            
                            
                            ;*************************************
                            ;*     PU3H 1 ON ARITHMETIC STACK    *
                            ;*************************************
                            
000A2F  AAFD              : LIT1:   ILD     LSTK(P2)
000A31  AAFD              :         ILD     LSTK(P2)
000A33  33                :         XPAL    P3
000A34  C410              :         LDI     HI(AESTK)
000A36  37                :         XPAH    P3
000A37  C400              :         LDI     0
000A39  CBFF              :         ST      -1(P3)
000A3B  C401              :         LDI     1
000A3D  CBFE              :         ST      -2(P3)
000A3F  90EA              :         JMP     X24
                            
                            
                            ;*************************************
                            ;*      FOR-LOOP INITIALIZATION      *
                            ;*************************************
                            
000A41  C2FE              : SAVFOR: LD      FORPTR(P2)      ; CHECK FOR FOR STACK
000A43  E4A6              :         XRI     LO(PCSTAK)      ;  OVERFLOW
000A45  9C04              :         JNZ     SFOR1
000A47  C40A              :         LDI     10
000A49  90E2              : E17:    JMP     E16A
000A4B  E4A6              : SFOR1:  XRI     LO(PCSTAK)
000A4D  31                :         XPAL    P1              ; POINT P1 AT FOR STACK
000A4E  CAF1              :         ST      P1L0W(P2)       ; SAVING OLD P1
000A50  C410              :         LDI     HI(FORSTK)
000A52  35                :         XPAH    P1

Portable National Semiconductor SC/MP Assembler [15.02]

000A53  CAF0              :         ST      P1HIGH(P2)
000A55  C2FD              :         LD      LSTK(P2)        ; POINT P2 AT AE STACK
000A57  33                :         XPAL    P3
000A58  C410              :         LDI     HI(AESTK)
000A5A  37                :         XPAH    P3
000A5B  C3F9              :         LD      -7(P3)          ;GET  VARIABLE INDEX
000A5D  CD01              :         ST      @1(P1)          ;SAVE ON         FOR-STACK
000A5F  C3FC              :         LD      -4(P3)          ;GET  L(LIMIT)
000A61  CD01              :         ST      @1(P1)          ;SAVE
000A63  C3FD              :         LD      -3(P3)          ;GET  H(LIMIT)
000A65  CD01              :         ST      @1(P1)          ;SAVE
000A67  C3FE              :         LD      -2(P3)          ;GET  L(STEP)
000A69  CD01              :         ST      @1(P1)          ;SAVE
000A6B  C3FF              :         LD      -1(P3)          ;GET  H(STEP)
000A6D  CD01              :         ST      @1(P1)          ;SAVE
000A6F  C2F1              :         LD      P1L0W(P2)       ;GET  L(P1)
000A71  CD01              :         ST      @1(P1)          ;SAVE
000A73  C2F0              :         LD      P1HIGH(P2)      ;GET  H(P1)
000A75  CD01              :         ST      @1(P1)          ;SAVE
000A77  35                :         XPAH    P1              ;RESTORE         OLD P1
000A78  C2F1              :         LD      P1L0W(P2)
000A7A  31                :         XPAL    P1
000A7B  CAFE              :         ST      FORPTR(P2)      ;UPDATE POR STACK PTR
000A7D  C7FC              :         LD      @-4(P3)
000A7F  33                :         XPAL    P3
000A80  CAFD              :         ST      LSTK(P2)        ;UPDATE AE STACK         PTR
000A82  90A7              : X25:    JMP     X24
                            
                            
                            ;*************************************
                            ;*    FIRST PART OF  'NEXT VAR'      *
                            ;*************************************
                            
000A84  C2FE              : NEXTV:  LD      FORPTR(P2)      ;POINT P1 AT FOR  STACK,
000A86  E48A              :         XRI     LO(FORSTK)       ; CHECKING FOR UNDERFLOW
000A88  9C04              :         JNZ     QNXTV1
000A8A  C40B              :         LDI     11              ;REPORT ERROR
000A8C  90BB              :         JMP     E17
000A8E  E48A              : QNXTV1: XRI     LO(FORSTK)
000A90  31                :         XPAL    P1
000A91  CAF1              :         ST      P1L0W(P2)       ;SAVE OLD P1
000A93  C410              :         LDI     HI(FORSTK)
000A95  35                :         XPAH    P1
000A96  CAF0              :         ST      P1HIGH(P2)
000A98  C2FD              :         LD      LSTK(P2)        ;POINT P3 AT AE STACK
000A9A  33                :         XPAL    P3
000A9B  C410              :         LDI     HI(AESTK)
000A9D  37                :         XPAH    P3
000A9E  C7FF              :         LD      @-1(P3)         ;GET  VARIABLE  INDEX
000AA0  E1F9              :         XOR     -7(P1)          ;COMPARE  WITH  INDEX
000AA2  9804              :         JZ      NXTV10          ; ON  FOR  STACK: ERROR
000AA4  C40C              :         LDI     12              ; IF NOT EQUAL
000AA6  90A1              : E18:    JMP     E17
000AA8  E1F9              : NXTV10: XOR     -7(P1)          ;RESTORE  INDEX

Portable National Semiconductor SC/MP Assembler [15.02]

000AAA  01                :         XAE                     ;SAVE IN  EREG
000AAB  C280              :         LD      EREG(P2)        ;GET L(VARIABLE)
000AAD  02                :         CCL
000AAE  F1FC              :         ADD     -4(P1)          ;ADD L(STEP)
000AB0  CA80              :         ST      EREG(P2)        ;STORE  IN VARIABLE
000AB2  CB00              :         ST      (P3)            ;  AND ON STACK
000AB4  C601              :         LD      @1(P2)          ; INCREMENT RAM PTR
000AB6  C280              :         LD      EREG(P2)        ;GET H(VARIABLE)
000AB8  F1FD              :         ADD     -3(P1)          ;ADD H(STEP)
000ABA  CA80              :         ST      EREG(P2)        ; STORE  IN VARIABLE
000ABC  CB01              :         ST      1(P3)           ;  AND ON STACK
000ABE  C6FF              :         LD      @-1(P2)         ; RESTORE RAM POINTER
000AC0  C1FA              :         LD      -6(P1)          ;GET L(LIMIT)
000AC2  CB02              :         ST      2(P3)           ;PUT ON STACK
000AC4  C1FB              :         LD      -5(P1)          ;GET H(LIMIT)
000AC6  CB03              :         ST      3(P3)           ;PUT ON STACK
000AC8  C1FD              :         LD      -3(P1)          ;GET H(STEP)
000ACA  9410              :         JP      NXTV2           ; IF NEGATIVE, INVERT
000ACC  C404              :         LDI     4               ;  ITEMS ON A. E.  STACK
000ACE  CAEB              :         ST      NUM(P2)         ;NUM = LOOP  COUNTER
000AD0  C701              : LOOP10: LD      @1(P3)          ;GET BYTE FROM STACK
000AD2  E4FF              :         XRI     X'FF            ; INVERT IT
000AD4  CBFF              :         ST      -1(P3)          ;PUT BACK ON STACK
000AD6  BAEB              :         DLD     NUM(P2)         ; DO UNTIL NUM = 0
000AD8  9CF6              :         JNZ     LOOP10
000ADA  9002              :         JMP     NXTV3
000ADC  C704              : NXTV2:  LD      @4(P3)          ;UPDATE AE STACK POINTER
000ADE  33                : NXTV3:  XPAL    P3
000ADF  CAFD              :         ST      LSTK(P2)
000AE1  C2F1              :         LD      P1L0W(P2)       ; RESTORE OLD P1
000AE3  31                :         XPAL    P1
000AE4  C2F0              :         LD      P1HIGH(P2)
000AE6  35                :         XPAH    P1
000AE7  9099              : X26:    JMP     X25
                            
                            
                            ;*************************************
                            ;*     SECOND PART OF 'NEXT VAR'     *
                            ;*************************************
                            
000AE9  C2EF              : NEXTV1: LD      LOW(P2)         ;IS FOR-LOOP  OVER WITH?
000AEB  9808              :         JZ      X_REDO          ;N0 - REPEAT LOOP
000AED  C2FE              :         LD      FORPTR(P2)      ;YES - POP FOR-STACK
000AEF  02                :         CCL
000AF0  F4F9              :         ADI     -7
000AF2  CAFE              :         ST      FORPTR(P2)
000AF4  3F                :         XPPC    P3              ; RETURN TO I.L. INTERPRETER
000AF5  C2FE              : X_REDO: LD      FORPTR(P2)      ; POINT P3 AT FOR STACK
000AF7  33                :         XPAL    P3
000AF8  C410              :         LDI     HI(FORSTK)
000AFA  37                :         XPAH    P3
000AFB  C3FF              :         LD      -1(P3)          ;GET OLD P1 OFF STACK
000AFD  35                :         XPAH    P1
000AFE  C3FE              :         LD      -2(P3)

Portable National Semiconductor SC/MP Assembler [15.02]

000B00  31                :         XPAL    P1
000B01  90E4              :         JMP     X26
000B03  90A1              : E19:    JMP     E18
                            
                            
                            ;************************************
                            ;*      PRINT MEMORY AS STRING      *
                            ;************************************
                            
                            ;  THIS ROUTINE IMPLEMENTS THE STATEMENT:
                            ;      'PRINT' '$' FACTOR
                            
000B05  C2EE              : PSTRNG: LD      HIGH(P2)        ;POINT P1 AT STRING TO PRINT
000B07  35                :         XPAH    P1
000B08  C2EF              :         LD      LOW(P2)
000B0A  31                :         XPAL    P1
                                    LDPI    P3,PUTC-1       ;POINT P3 AT PUTC ROUTINE
000B0B  C40F              +         LDI     HI(PUTC-1)
000B0D  37                +         XPAH    P3
000B0E  C49D              +         LDI     LO(PUTC-1)
000B10  33                +         XPAL    P3
000B11  C501              : PRSTR1: LD      @1(P1)          ;GET A CHARACTER
000B13  E40D              :         XRI     X'0D            ;IS IT A CARRIAGE RETURN?
000B15  98D0              :         JZ      X26             ;YES - WE'RE DONE
000B17  E40D              :         XRI     X'0D            ;NO - PRINT THE CHARACTER
000B19  3F                :         XPPC    P3
000B1A  06                :         CSA                     ;MAKE SURE NO ONE IS
000B1B  D420              :         ANI     X'20            ;TYPING ON THE TTY
000B1D  9CF2              :         JNZ     PRSTR1          ;BEFORE REPEATING LOOP
000B1F  90C6              :         JMP     X26
                            
                            
                            ;************************************
                            ;*        INPUT A STRING            *
                            ;************************************
                            
                            ;  THIS ROUTINE IMPLEMENTS THE STATEMENT:
                            ;       'INPUT' '$' FACTOR
                            
000B21  C2EE              : ISTRNG: LD      HIGH(P2)        ;GET ADDRESS TO STORE THE
000B23  37                :         XPAH    P3              ;  STRING,  PUT IT INTO P3
000B24  C2EF              :         LD      LOW(P2)
000B26  33                :         XPAL    P3
000B27  C501              : INPST2: LD      @1(P1)          ;GET A BYTE FROM LINE BUFFER
000B29  CF01              :         ST      @1(P3)          ;PUT IT IN SPECIFIED LOCATION
000B2B  E40D              :         XRI     X'0D            ;DO UNTIL CHAR = CARR.  RETURN
000B2D  9CF8              :         JNZ     INPST2
000B2F  90B6              : X27:    JMP     X26
                            
                            
                            ;************************************
                            ;*   STRING CONSTANT ASSIGNMENT     *
                            ;************************************
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            ;  THIS ROUTINE IMPLEMENTS THE STATEMENT:
                            ;       '$'  FACTOR  '=' STRING
                            
000B31  C2EF              : PUTSTR: LD      LOW(P2)         ;GET ADDRESS TO STORE STRING,
000B33  33                :         XPAL    P3              ;  PUT IT INTO P3
000B34  C2EE              :         LD      HIGH(P2)
000B36  37                :         XPAH    P3
000B37  C501              : LOOP11: LD      @1(P1)          ;GET A BYTE FROM STRING
000B39  E422              :         XRI     '"'             ;CHECK FOR END OF STRING
000B3B  980E              :         JZ      STREND
000B3D  E42F              :         XRI     '"' | X'0D      ;MAKE SURE THERE'S NO CR
000B3F  9C04              :         JNZ     PTSTR1
000B41  C407              :         LDI     7
000B43  90BE              :         JMP     E19             ;ERROR IF CARRIAGE RETURN
000B45  E40D              : PTSTR1: XRI     X'0D            ;RESTORE CHARACTER
000B47  CF01              :         ST      @1(P3)          ;PUT IN SPECIFIED LOCATION
000B49  90EC              :         JMP     LOOP11          ;GET NEXT CHARACTER
000B4B  C40D              : STREND: LDI     X'0D            ;APPEND CARRIAGE RETURN
000B4D  CB00              :         ST      (P3)            ;  TO STRING
000B4F  90DE              :         JMP     X27
                            
                            
                            ;************************************
                            ;*           MOVE STRING            *
                            ;************************************
                            
                            ;  THIS  ROUTINE  IMPLEMENTS  THE  STATEMENT:
                            ;       '$' FACTOR  '='  '$' FACTOR
                            
000B51  C2FD              : MOVSTR: LD      LSTK(P2)        ; POINT P3 AT A. E.  STACK
000B53  33                :         XPAL    P3
000B54  C410              :         LDI     HI(AESTK)
000B56  37                :         XPAH    P3
000B57  C7FF              :         LD      @-1(P3)         ;GET ADDRESS OF SOURCE STRING
000B59  35                :         XPAH    P1              ;  INTO P1
000B5A  C7FF              :         LD      @-1(P3)
000B5C  31                :         XPAL    P1
000B5D  C7FF              :         LD      @-1(P3)         ;GET ADDRESS OF DESTINATION
000B5F  01                :         XAE                     ;  STRING INTO P3
000B60  C7FF              :         LD      @-1(P3)
000B62  33                :         XPAL    P3
000B63  CAFD              :         ST      LSTK(P2)        ;UPDATE STACK POINTER
000B65  40                :         LDE
000B66  37                :         XPAH    P3
000B67  C501              : LOOP12: LD      @1(P1)          ;GET A SOURCE CHARACTER
000B69  CF01              :         ST      @1(P3)          ;SEND IT TO DESTINATION
000B6B  E40D              :         XRI     X'0D            ;REPEAT UNTIL CARRIAGE RET.
000B6D  98C0              :         JZ      X27
000B6F  06                :         CSA                     ;  OR KEYBOARD INTERRUPT
000B70  D420              :         ANI     X'20
000B72  9CF3              :         JNZ     LOOP12
000B74  90B9              :         JMP     X27
                            
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            ;************************************
                            ;*    PUT PAGE NUMBER ON STACK      *
                            ;************************************
                            
000B76  AAFD              : PUTPGE: ILD     LSTK(P2)
000B78  AAFD              :         ILD     LSTK(P2)
000B7A  33                :         XPAL    P3
000B7B  C410              :         LDI     HI(AESTK)
000B7D  37                :         XPAH    P3
000B7E  C2F6              :         LD      PAGE(P2)
000B80  CBFE              :         ST      -2(P3)
000B82  C400              :         LDI     0
000B84  CBFF              :         ST      -1(P3)
000B86  90A7              :         JMP     X27
                            
                            
                            ;************************************
                            ;*        ASSIGN NEW PAGE           *
                            ;************************************
                            
000B88  C2EF              : NUPAGE: LD      LOW(P2)         ;GET PAGE  #  FROM  STACK,
000B8A  D407              :         ANI     7               ;GET  THE  LOW  3 BITS
000B8C  9C02              :         JNZ     NUPGE0          ;PAGE  0 BECOMES PAGE  1
000B8E  C401              :         LDI     1
000B90  CAF6              : NUPGE0: ST      PAGE(P2)
000B92  3F                :         XPPC    P3              ; RETURN
                            
                            ;*************************************
                            ;*         FIND START OF PAGE        *
                            ;*************************************
                            
                            ;  THIS ROUTINE COMPUTES THE START OF THE CURRENT TEXT PAGE,
                            ;  STORING THE ADDRESS IN TEMP2(P2) [THE HIGH BYTE], AND
                            ;  TEMP3(P2) [THE LOW BYTE].
                            
000B93  C2F6              : FNDPGE: LD      PAGE(P2)
000B95  E401              :         XRI     1               ;SPECIAL CASE IS PAGE 1, BUT
000B97  9C09              :         JNZ     FPGE1           ;OTHERS ARE CONVENTIONAL
000B99  C411              :         LDI     HI(PGM)         ;PAGE 1 STARTS AT 'PGM'
000B9B  CAE9              :         ST      TEMP2(P2)
000B9D  C420              :         LDI     LO(PGM)
000B9F  CAE8              :         ST      TEMP3(P2)
000BA1  3F                :         XPPC    P3              ;RETURN
000BA2  E401              : FPGE1:  XRI     1               ;RESTORE PAGE   #
000BA4  01                :         XAE                     ;SAVE   IT
000BA5  C404              :         LDI     4               ;LOOP   COUNTER  = 4
000BA7  CAEB              :         ST      NUM(P2)
000BA9  40                : LOOP13: LDE                     ; MULTIPLY  PAGE# BY  16
000BAA  02                :         CCL
000BAB  70                :         ADE
000BAC  01                :         XAE
000BAD  BAEB              :         DLD     NUM(P2)
000BAF  9CF8              :         JNZ     LOOP13
000BB1  40                :         LDE

Portable National Semiconductor SC/MP Assembler [15.02]

000BB2  CAE9              :         ST      TEMP2(P2)       ;TEMP2 HAS HIGH BYTE
000BB4  C402              :         LDI     2               ;  OF ADDRESS NOW
000BB6  CAE8              :         ST      TEMP3(P2)       ;LOW BYTE IS ALWAYS 2
000BB8  3F                :         XPPC    P3
                            
                            
                            ;************************************
                            ;*      MOVE CURSOR TO NEW PAGE     *
                            ;************************************
                            
000BB9  C2E9              : CHPAGE: LD      TEMP2(P2)       ;PUT START OF PAGE
000BBB  35                :         XPAH    P1              ;  INTO P1.   THIS ROUTINE
000BBC  C2E8              :         LD      TEMP3(P2)       ;  MUST BE CALLED RIGHT
000BBE  31                :         XPAL    P1              ;  AFTER 'FNDPGE'
000BBF  3F                :         XPPC    P3              ; RETURN
                            
                            
                            ;************************************
                            ;*      DETERMINE CURRENT PAGE      *
                            ;************************************
                            
000BC0  35                : DETPGE: XPAH    P1              ;CURRENT PAGE IS HIGH
000BC1  01                :         XAE                     ;  PART OF CURSOR DIVIDED
000BC2  40                :         LDE                     ;  BY 16
000BC3  35                :         XPAH    P1
000BC4  40                :         LDE
000BC5  1C                :         SR
000BC6  1C                :         SR
000BC7  1C                :         SR
000BC8  1C                :         SR
000BC9  CAF6              :         ST      PAGE(P2)
000BCB  3F                :         XPPC    P3              ;RETURN
                            
                            
                            ;************************************
                            ;*         CLEAR CURRENT PAGE       *
                            ;************************************
                            
000BCC  C2E9              : NEWPGM: LD      TEMP2(P2)       ;POINT P1 AT CURRENT PAGE
000BCE  35                :         XPAH    P1
000BCF  C2E8              :         LD      TEMP3(P2)
000BD1  31                :         XPAL    P1
000BD2  C40D              :         LDI     X'0D            ;PUT DUMMY END-OF-LINE
000BD4  C9FF              :         ST      -1(P1)          ;  JUST BEFORE TEXT
000BD6  C4FF              :         LDI     -1              ;PUT -1 AT START OF TEXT
000BD8  C900              :         ST      (P1)
000BDA  C901              :         ST      1(P1)
000BDC  3F                :         XPPC    P3              ;RETURN
                            
                            
                            ;*************************************
                            ;*      FIND LINE NUMBER IN TEXT     *
                            ;*************************************
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            ; INPUTS:  THE START OF THE CURRENT PAGE  IN TEMP2 AND TEMPS,
                            ;          THE LINE NUMBER TO LOOK FOR  IN LO AND HI.
                            ; OUTPUTS: THE ADDRESS OF THE FIRST LINE  IN THE NIBL TEXT
                            ;          WHOSE LINE NUMBER IS GREATER THAN OR EQUAL TO THE
                            ;          NUMBER IN HI AND LO,  RETURNED  IN P1 AND  ALSO IN
                            ;          IN THE RAM VARIABLES LABLLO AND LABLHI.   THE SIGN
                            ;          BIT OF LABLHI IS SET IF EXACT LINE  IS NOT FOUND.
                            
000BDD  C2E9              : FNDLBL: LD      TEMP2(P2)       ; POINT P1 AT START OF TEXT
000BDF  35                :         XPAH    P1
000BE0  C2E8              :         LD      TEMP3(P2)
000BE2  31                :         XPAL    P1
000BE3  C100              : FLBL1:  LD      (P1)            ;HAVE WE HIT END OF TEXT?
000BE5  E4FF              :         XRI     X'FF
000BE7  9412              :         JP      FLBL2           ;YES - STOP  LOOKING
000BE9  03                :         SCL                     ; NO - COMPARE LINE NUMBERS
000BEA  C101              :         LD      1(P1)           ;  BY SUBTRACTING
000BEC  FAEF              :         CAD     LOW(P2)
000BEE  C100              :         LD      0(P1)
000BF0  FAEE              :         CAD     HIGH(P2)        ;IS TEXT LINE # >= LINE #?
000BF2  9407              :         JP      FLBL2           ;YES - STOP  LOOKING.
000BF4  C102              :         LD      2(P1)           ;NO - TRY NEXT LINE IN TEXT
000BF6  01                :         XAE
000BF7  C580              :         LD      @EREG(P1)       ;  SKIP LENGTH OF  LINE
000BF9  90E8              :         JMP     FLBL1
000BFB  31                : FLBL2:  XPAL    P1              ;SAVE ADDRESS OF FOUND LINE
000BFC  CAF3              :         ST      LABLLO(P2)      ;  IN LABLHI  AND LABLLO
000BFE  31                :         XPAL    P1
000BFF  35                :         XPAH    P1
000C00  CAF2              :         ST      LABLHI(P2)
000C02  35                :         XPAH    P1
000C03  C2EF              :         LD      LOW(P2)         ;WAS THERE AN EXACT MATCH?
000C05  E101              :         XOR     1(P1)
000C07  9C07              :         JNZ     FLBL3
000C09  C2EE              :         LD      HIGH(P2)
000C0B  E100              :         XOR     0(P1)
000C0D  9C01              :         JNZ     FLBL3           ;NO - FLAG THE ADDRESS
000C0F  3F                :         XPPC    P3              ;YES - RETURN NORMALLY
000C10  C2F2              : FLBL3:  LD      LABLHI(P2)      ;SET SIGN BIT OF  HIGH PART
000C12  DC80              :         ORI     X'80            ;  OF ADDRESS TO INDICATE
000C14  CAF2              :         ST      LABLHI(P2)      ;  INEXACT MATCH OF LINE #'S
000C16  3F                :         XPPC    P3
                            
                            ;***********************************
                            ;*       I. L.  MACROS             *
                            ;***********************************
                            
        00002000          = TSTBITH =       TSTBIT*256
        00008000          = CALBITH =       CALBIT*256
        00004000          = JMPBITH =       JMPBIT*256
                            
                            
                            TSTR    .MACRO  FAIL,STR,LST
                                    .DBYTE (FAIL & X'0FFF) | TSTBITH

Portable National Semiconductor SC/MP Assembler [15.02]

                                    .BYTE   STR,(LST | X'80)
                                    .ENDM
                            
                            TSTCR   .MACRO  FAIL
                                    .DBYTE  (FAIL & X'0FFF) | TSTBITH
                                    .BYTE   X'0D|X'80
                                    .ENDM
                            
                            TSTV    .MACRO  FAIL
                                    .DBYTE  (TSTVAR-1) & X'0FFF
                                    .DBYTE  FAIL
                                    .ENDM
                            
                            TSTN    .MACRO  FAIL
                                    .DBYTE  (TSTNUM-1) & X'0FFF
                                    .DBYTE  FAIL
                                    .ENDM
                            
                            JUMP    .MACRO  ADR
                                    .DBYTE  (ADR & X'0FFF)| JMPBITH
                                    .ENDM
                            
                            CALL    .MACRO  ADR
                                    .DBYTE  (ADR & X'0FFF) | CALBITH
                                    .ENDM
                            
                            DO      .MACRO  ADR
                                    .DBYTE  ADR-1
                                    .ENDM
                            
                            ;*************************************
                            ;*           I. L. TABLE             *
                            ;*************************************
                            
                            START:  DO      NLINE
000C17  020C              +         .DBYTE  NLINE-1
                            PROMPT: DO      GETL
000C19  0756              +         .DBYTE  GETL-1
                                    TSTCR   PRMPT1
000C1B  2C20              +         .DBYTE  (PRMPT1 & X'0FFF) | TSTBITH
000C1D  8D                +         .BYTE   X'0D|X'80
                                    JUMP    PROMPT
000C1E  4C19              +         .DBYTE  (PROMPT & X'0FFF)| JMPBITH
                            PRMPT1: TSTN    LIST
000C20  06AB              +         .DBYTE  (TSTNUM-1) & X'0FFF
000C22  0C30              +         .DBYTE  LIST
                                    DO      FNDPGE
000C24  0B92              +         .DBYTE  FNDPGE-1
                                    DO      XCHGP1
000C26  0630              +         .DBYTE  XCHGP1-1
                                    DO      POPAE
000C28  0910              +         .DBYTE  POPAE-1
                                    DO      FNDLBL
000C2A  0BDC              +         .DBYTE  FNDLBL-1

Portable National Semiconductor SC/MP Assembler [15.02]

                                    DO      INSRT
000C2C  081E              +         .DBYTE  INSRT-1
                                    JUMP    PROMPT
000C2E  4C19              +         .DBYTE  (PROMPT & X'0FFF)| JMPBITH
                            
                            LIST:   TSTR    RUN,"LIS",'T'
000C30  2C4C              +         .DBYTE (RUN & X'0FFF) | TSTBITH
000C32  4C4953D4          +         .BYTE   "LIS",('T' | X'80)
                                    DO      FNDPGE
000C36  0B92              +         .DBYTE  FNDPGE-1
                                    TSTN    LIST1
000C38  06AB              +         .DBYTE  (TSTNUM-1) & X'0FFF
000C3A  0C42              +         .DBYTE  LIST1
                                    DO      POPAE
000C3C  0910              +         .DBYTE  POPAE-1
                                    DO      FNDLBL
000C3E  0BDC              +         .DBYTE  FNDLBL-1
                                    JUMP    LIST2
000C40  4C44              +         .DBYTE  (LIST2 & X'0FFF)| JMPBITH
                            LIST1:  DO      CHPAGE
000C42  0BB8              +         .DBYTE  CHPAGE-1
                            LIST2:  DO      LST
000C44  02D8              +         .DBYTE  LST-1
                            LIST3:  CALL    PRNUM
000C46  8F2A              +         .DBYTE  (PRNUM & X'0FFF) | CALBITH
                                    DO      LST3
000C48  0305              +         .DBYTE  LST3-1
                                    JUMP    START
000C4A  4C17              +         .DBYTE  (START & X'0FFF)| JMPBITH
                            RUN:    TSTR    CLR,"RU",'N'
000C4C  2C5B              +         .DBYTE (CLR & X'0FFF) | TSTBITH
000C4E  5255CE            +         .BYTE   "RU",('N' | X'80)
                                    DO      DONE
000C51  012F              +         .DBYTE  DONE-1
                            BEGIN:  DO      FNDPGE
000C53  0B92              +         .DBYTE  FNDPGE-1
                                    DO      CHPAGE
000C55  0BB8              +         .DBYTE  CHPAGE-1
                                    DO      STRT
000C57  02BF              +         .DBYTE  STRT-1
                                    DO      NXT
000C59  0283              +         .DBYTE  NXT-1
                            CLR:    TSTR    NEW,"CLEA",'R'
000C5B  2C68              +         .DBYTE (NEW & X'0FFF) | TSTBITH
000C5D  434C4541D2        +         .BYTE   "CLEA",('R' | X'80)
                                    DO      DONE
000C62  012F              +         .DBYTE  DONE-1
                                    DO      CLEAR
000C64  0050              +         .DBYTE  CLEAR-1
                                    DO      NXT
000C66  0283              +         .DBYTE  NXT-1
                            NEW:    TSTR    STMT,"NE",'W'
000C68  2C81              +         .DBYTE (STMT & X'0FFF) | TSTBITH
000C6A  4E45D7            +         .BYTE   "NE",('W' | X'80)

Portable National Semiconductor SC/MP Assembler [15.02]

                                    TSTN    DFAULT
000C6D  06AB              +         .DBYTE  (TSTNUM-1) & X'0FFF
000C6F  0C73              +         .DBYTE  DFAULT
                                    JUMP    NEW1
000C71  4C75              +         .DBYTE  (NEW1 & X'0FFF)| JMPBITH
                            DFAULT: DO      LIT1
000C73  0A2E              +         .DBYTE  LIT1-1
                            NEW1:   DO      DONE
000C75  012F              +         .DBYTE  DONE-1
                                    DO      POPAE
000C77  0910              +         .DBYTE  POPAE-1
                                    DO      NUPAGE
000C79  0B87              +         .DBYTE  NUPAGE-1
                                    DO      FNDPGE
000C7B  0B92              +         .DBYTE  FNDPGE-1
                                    DO      NEWPGM
000C7D  0BCB              +         .DBYTE  NEWPGM-1
                                    DO      NXT
000C7F  0283              +         .DBYTE  NXT-1
                            STMT:   TSTR    LET,"LE",'T'
000C81  2C86              +         .DBYTE (LET & X'0FFF) | TSTBITH
000C83  4C45D4            +         .BYTE   "LE",('T' | X'80)
                            LET:    TSTV    AT
000C86  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000C88  0C95              +         .DBYTE  AT
                                    TSTR    SYNTAX,"",'='
000C8A  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000C8C  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    RELEXP
000C8D  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      STORE
000C8F  04C0              +         .DBYTE  STORE-1
                                    DO      DONE
000C91  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000C93  0283              +         .DBYTE  NXT-1
                            AT:     TSTR    IF,"",'@'
000C95  2CA5              +         .DBYTE (IF & X'0FFF) | TSTBITH
000C97  C0                +         .BYTE   "",('@' | X'80)
                                    CALL    FACTOR
000C98  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"",'='
000C9A  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000C9C  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    RELEXP
000C9D  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      MOVE
000C9F  0802              +         .DBYTE  MOVE-1
                                    DO      DONE
000CA1  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000CA3  0283              +         .DBYTE  NXT-1
                            
                            IF:     TSTR    UNT,"I",'F'

Portable National Semiconductor SC/MP Assembler [15.02]

000CA5  2CB7              +         .DBYTE (UNT & X'0FFF) | TSTBITH
000CA7  49C6              +         .BYTE   "I",('F' | X'80)
                                    CALL    RELEXP
000CA9  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    IF1,"THE",'N'
000CAB  2CB1              +         .DBYTE (IF1 & X'0FFF) | TSTBITH
000CAD  544845CE          +         .BYTE   "THE",('N' | X'80)
                            IF1:    DO      POPAE
000CB1  0910              +         .DBYTE  POPAE-1
                                    DO      CMPR
000CB3  05D0              +         .DBYTE  CMPR-1
                                    JUMP    STMT
000CB5  4C81              +         .DBYTE  (STMT & X'0FFF)| JMPBITH
                            
                            UNT:    TSTR    DOSTMT,"UNTI",'L'
000CB7  2CCC              +         .DBYTE (DOSTMT & X'0FFF) | TSTBITH
000CB9  554E5449CC        +         .BYTE   "UNTI",('L' | X'80)
                                    DO      CKMODE
000CBE  063B              +         .DBYTE  CKMODE-1
                                    CALL    RELEXP
000CC0  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      DONE
000CC2  012F              +         .DBYTE  DONE-1
                                    DO      POPAE
000CC4  0910              +         .DBYTE  POPAE-1
                                    DO      UNTIL
000CC6  0922              +         .DBYTE  UNTIL-1
                                    DO      DETPGE
000CC8  0BBF              +         .DBYTE  DETPGE-1
                                    DO      NXT
000CCA  0283              +         .DBYTE  NXT-1
                            
                            DOSTMT: TSTR    GOTO,"D",'O'
000CCC  2CD8              +         .DBYTE (GOTO & X'0FFF) | TSTBITH
000CCE  44CF              +         .BYTE   "D",('O' | X'80)
                                    DO      CKMODE
000CD0  063B              +         .DBYTE  CKMODE-1
                                    DO      DONE
000CD2  012F              +         .DBYTE  DONE-1
                                    DO      SAVEDO
000CD4  0972              +         .DBYTE  SAVEDO-1
                                    DO      NXT
000CD6  0283              +         .DBYTE  NXT-1
                            GOTO:   TSTR    RETURN,"G",'O'
000CD8  2CFB              +         .DBYTE (RETURN & X'0FFF) | TSTBITH
000CDA  47CF              +         .BYTE   "G",('O' | X'80)
                                    TSTR    GOSUB,"T",'O'
000CDC  2CE6              +         .DBYTE (GOSUB & X'0FFF) | TSTBITH
000CDE  54CF              +         .BYTE   "T",('O' | X'80)
                                    CALL    RELEXP
000CE0  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      DONE
000CE2  012F              +         .DBYTE  DONE-1
                                    JUMP    TBL001

Portable National Semiconductor SC/MP Assembler [15.02]

000CE4  4CF1              +         .DBYTE  (TBL001 & X'0FFF)| JMPBITH
                            GOSUB:  TSTR    SYNTAX,"SU",'B'
000CE6  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000CE8  5355C2            +         .BYTE   "SU",('B' | X'80)
                                    CALL    RELEXP
000CEB  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      DONE
000CED  012F              +         .DBYTE  DONE-1
                                    DO      SAV
000CEF  0109              +         .DBYTE  SAV-1
                            TBL001: DO      FNDPGE
000CF1  0B92              +         .DBYTE  FNDPGE-1
                                    DO      POPAE
000CF3  0910              +         .DBYTE  POPAE-1
                                    DO      FNDLBL
000CF5  0BDC              +         .DBYTE  FNDLBL-1
                                    DO      XFER
000CF7  0168              +         .DBYTE  XFER-1
                                    DO      NXT
000CF9  0283              +         .DBYTE  NXT-1
                            
                            RETURN: TSTR    NEXT,"RETUR",'N'
000CFB  2D0B              +         .DBYTE (NEXT & X'0FFF) | TSTBITH
000CFD  5245545552CE      +         .BYTE   "RETUR",('N' | X'80)
                                    DO      DONE
000D03  012F              +         .DBYTE  DONE-1
                                    DO      RSTR
000D05  0142              +         .DBYTE  RSTR-1
                                    DO      DETPGE
000D07  0BBF              +         .DBYTE  DETPGE-1
                                    DO      NXT
000D09  0283              +         .DBYTE  NXT-1
                            NEXT:   TSTR    FOR,"NEX",'T'
000D0B  2D25              +         .DBYTE (FOR & X'0FFF) | TSTBITH
000D0D  4E4558D4          +         .BYTE   "NEX",('T' | X'80)
                                    DO      CKMODE
000D11  063B              +         .DBYTE  CKMODE-1
                                    TSTV    SYNTAX
000D13  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000D15  0E2A              +         .DBYTE  SYNTAX
                                    DO      DONE
000D17  012F              +         .DBYTE  DONE-1
                                    DO      NEXTV
000D19  0A83              +         .DBYTE  NEXTV-1
                                    CALL    GTROP
000D1B  8E5A              +         .DBYTE  (GTROP & X'0FFF) | CALBITH
                                    DO      POPAE
000D1D  0910              +         .DBYTE  POPAE-1
                                    DO      NEXTV1
000D1F  0AE8              +         .DBYTE  NEXTV1-1
                                    DO      DETPGE
000D21  0BBF              +         .DBYTE  DETPGE-1
                                    DO      NXT
000D23  0283              +         .DBYTE  NXT-1

Portable National Semiconductor SC/MP Assembler [15.02]

                            
                            FOR:    TSTR    STAT,"FO",'R'
000D25  2D4F              +         .DBYTE (STAT & X'0FFF) | TSTBITH
000D27  464FD2            +         .BYTE   "FO",('R' | X'80)
                                    DO      CKMODE
000D2A  063B              +         .DBYTE  CKMODE-1
                                    TSTV    SYNTAX
000D2C  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000D2E  0E2A              +         .DBYTE  SYNTAX
                                    TSTR    SYNTAX,"",'='
000D30  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D32  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    RELEXP
000D33  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"T",'O'
000D35  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D37  54CF              +         .BYTE   "T",('O' | X'80)
                                    CALL    RELEXP
000D39  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    FORI,"STE",'P'
000D3B  2D45              +         .DBYTE (FORI & X'0FFF) | TSTBITH
000D3D  535445D0          +         .BYTE   "STE",('P' | X'80)
                                    CALL    RELEXP
000D41  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    JUMP    FOR2
000D43  4D47              +         .DBYTE  (FOR2 & X'0FFF)| JMPBITH
                            FORI:   DO      LIT1
000D45  0A2E              +         .DBYTE  LIT1-1
                            FOR2:   DO      DONE
000D47  012F              +         .DBYTE  DONE-1
                                    DO      SAVFOR
000D49  0A40              +         .DBYTE  SAVFOR-1
                                    DO      STORE
000D4B  04C0              +         .DBYTE  STORE-1
                                    DO      NXT
000D4D  0283              +         .DBYTE  NXT-1
                            
                            STAT:   TSTR    PGE,"STA",'T'
000D4F  2D62              +         .DBYTE (PGE & X'0FFF) | TSTBITH
000D51  535441D4          +         .BYTE   "STA",('T' | X'80)
                                    TSTR    SYNTAX,"",'='
000D55  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D57  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    RELEXP
000D58  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      POPAE
000D5A  0910              +         .DBYTE  POPAE-1
                                    DO      MOVESR
000D5C  0947              +         .DBYTE  MOVESR-1
                                    DO      DONE
000D5E  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000D60  0283              +         .DBYTE  NXT-1
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            PGE:    TSTR    DOLLAR,"PAG",'E'
000D62  2D79              +         .DBYTE (DOLLAR & X'0FFF) | TSTBITH
000D64  504147C5          +         .BYTE   "PAG",('E' | X'80)
                                    TSTR    SYNTAX,"",'='
000D68  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D6A  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    RELEXP
000D6B  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      DONE
000D6D  012F              +         .DBYTE  DONE-1
                                    DO      POPAE
000D6F  0910              +         .DBYTE  POPAE-1
                                    DO      NUPAGE
000D71  0B87              +         .DBYTE  NUPAGE-1
                                    DO      FNDPGE
000D73  0B92              +         .DBYTE  FNDPGE-1
                                    DO      CHPAGE
000D75  0BB8              +         .DBYTE  CHPAGE-1
                                    DO      NXT
000D77  0283              +         .DBYTE  NXT-1
                            
                            DOLLAR: TSTR    PRINT,"",'$'
000D79  2D99              +         .DBYTE (PRINT & X'0FFF) | TSTBITH
000D7B  A4                +         .BYTE   "",('$' | X'80)
                                    CALL    FACTOR
000D7C  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"",'='
000D7E  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D80  BD                +         .BYTE   "",('=' | X'80)
                                    TSTR    DOLR1,"",'"'
000D81  2D8A              +         .DBYTE (DOLR1 & X'0FFF) | TSTBITH
000D83  A2                +         .BYTE   "",('"' | X'80)
                                    DO      POPAE
000D84  0910              +         .DBYTE  POPAE-1
                                    DO      PUTSTR
000D86  0B30              +         .DBYTE  PUTSTR-1
                                    JUMP    DOLR2
000D88  4D95              +         .DBYTE  (DOLR2 & X'0FFF)| JMPBITH
                            DOLR1:  TSTR    SYNTAX,"",'$'
000D8A  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000D8C  A4                +         .BYTE   "",('$' | X'80)
                                    CALL    FACTOR
000D8D  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      XCHGP1
000D8F  0630              +         .DBYTE  XCHGP1-1
                                    DO      MOVSTR
000D91  0B50              +         .DBYTE  MOVSTR-1
                                    DO      XCHGP1
000D93  0630              +         .DBYTE  XCHGP1-1
                            DOLR2:  DO      DONE
000D95  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000D97  0283              +         .DBYTE  NXT-1
                            

Portable National Semiconductor SC/MP Assembler [15.02]

                            PRINT:  TSTR    INPUT,"P",'R'
000D99  2DCC              +         .DBYTE (INPUT & X'0FFF) | TSTBITH
000D9B  50D2              +         .BYTE   "P",('R' | X'80)
                                    TSTR    PR1,"IN",'T'
000D9D  2DA2              +         .DBYTE (PR1 & X'0FFF) | TSTBITH
000D9F  494ED4            +         .BYTE   "IN",('T' | X'80)
                            PR1:    TSTR    PR2,"",'"'
000DA2  2DA9              +         .DBYTE (PR2 & X'0FFF) | TSTBITH
000DA4  A2                +         .BYTE   "",('"' | X'80)
                                    DO      PRS
000DA5  0175              +         .DBYTE  PRS-1
                                    JUMP    COMMA
000DA7  4DBC              +         .DBYTE  (COMMA & X'0FFF)| JMPBITH
                            PR2:    TSTR    PR3,"",'$'
000DA9  2DB8              +         .DBYTE (PR3 & X'0FFF) | TSTBITH
000DAB  A4                +         .BYTE   "",('$' | X'80)
                                    CALL    FACTOR
000DAC  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      XCHGP1
000DAE  0630              +         .DBYTE  XCHGP1-1
                                    DO      POPAE
000DB0  0910              +         .DBYTE  POPAE-1
                                    DO      PSTRNG
000DB2  0B04              +         .DBYTE  PSTRNG-1
                                    DO      XCHGP1
000DB4  0630              +         .DBYTE  XCHGP1-1
                                    JUMP    COMMA
000DB6  4DBC              +         .DBYTE  (COMMA & X'0FFF)| JMPBITH
                            PR3:    CALL    RELEXP
000DB8  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    CALL    PRNUM
000DBA  8F2A              +         .DBYTE  (PRNUM & X'0FFF) | CALBITH
                            COMMA:  TSTR    PR4,"",','
000DBC  2DC1              +         .DBYTE (PR4 & X'0FFF) | TSTBITH
000DBE  AC                +         .BYTE   "",(',' | X'80)
                                    JUMP    PR1
000DBF  4DA2              +         .DBYTE  (PR1 & X'0FFF)| JMPBITH
                            PR4:    TSTR    PR5,"",';'
000DC1  2DC6              +         .DBYTE (PR5 & X'0FFF) | TSTBITH
000DC3  BB                +         .BYTE   "",(';' | X'80)
                                    JUMP    PR6
000DC4  4DC8              +         .DBYTE  (PR6 & X'0FFF)| JMPBITH
                            PR5:    DO      NLINE
000DC6  020C              +         .DBYTE  NLINE-1
                            PR6:    DO      DONE
000DC8  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000DCA  0283              +         .DBYTE  NXT-1
                            INPUT:  TSTR    END,"INPU",'T'
000DCC  2E04              +         .DBYTE (END & X'0FFF) | TSTBITH
000DCE  494E5055D4        +         .BYTE   "INPU",('T' | X'80)
                                    DO      CKMODE
000DD3  063B              +         .DBYTE  CKMODE-1
                                    TSTV    IN2

Portable National Semiconductor SC/MP Assembler [15.02]

000DD5  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000DD7  0DF1              +         .DBYTE  IN2
                                    DO      XCHGP1
000DD9  0630              +         .DBYTE  XCHGP1-1
                                    DO      GETL
000DDB  0756              +         .DBYTE  GETL-1
                            IN1:    CALL    RELEXP
000DDD  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      STORE
000DDF  04C0              +         .DBYTE  STORE-1
                                    DO      XCHGP1
000DE1  0630              +         .DBYTE  XCHGP1-1
                                    TSTR    IN3,"",','
000DE3  2E00              +         .DBYTE (IN3 & X'0FFF) | TSTBITH
000DE5  AC                +         .BYTE   "",(',' | X'80)
                                    TSTV    SYNTAX
000DE6  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000DE8  0E2A              +         .DBYTE  SYNTAX
                                    DO      XCHGP1
000DEA  0630              +         .DBYTE  XCHGP1-1
                                    TSTR    SYNTAX,"",','
000DEC  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000DEE  AC                +         .BYTE   "",(',' | X'80)
                                    JUMP    IN1
000DEF  4DDD              +         .DBYTE  (IN1 & X'0FFF)| JMPBITH
                            IN2:    TSTR    SYNTAX,"",'$'
000DF1  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000DF3  A4                +         .BYTE   "",('$' | X'80)
                                    CALL    FACTOR
000DF4  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      XCHGP1
000DF6  0630              +         .DBYTE  XCHGP1-1
                                    DO      GETL
000DF8  0756              +         .DBYTE  GETL-1
                                    DO      POPAE
000DFA  0910              +         .DBYTE  POPAE-1
                                    DO      ISTRNG
000DFC  0B20              +         .DBYTE  ISTRNG-1
                                    DO      XCHGP1
000DFE  0630              +         .DBYTE  XCHGP1-1
                            IN3:    DO      DONE
000E00  012F              +         .DBYTE  DONE-1
                                    DO      NXT
000E02  0283              +         .DBYTE  NXT-1
                            
                            END:    TSTR    ML,"EN",'D'
000E04  2E0D              +         .DBYTE (ML & X'0FFF) | TSTBITH
000E06  454EC4            +         .BYTE   "EN",('D' | X'80)
                                    DO      DONE
000E09  012F              +         .DBYTE  DONE-1
                                    DO      BREAK
000E0B  027F              +         .DBYTE  BREAK-1
                            
                            ML:     TSTR    REM,"LIN",'K'

Portable National Semiconductor SC/MP Assembler [15.02]

000E0D  2E21              +         .DBYTE (REM & X'0FFF) | TSTBITH
000E0F  4C494ECB          +         .BYTE   "LIN",('K' | X'80)
                                    CALL    RELEXP
000E13  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    DO      DONE
000E15  012F              +         .DBYTE  DONE-1
                                    DO      XCHGP1
000E17  0630              +         .DBYTE  XCHGP1-1
                                    DO      POPAE
000E19  0910              +         .DBYTE  POPAE-1
                                    DO      CALLML
000E1B  0961              +         .DBYTE  CALLML-1
                                    DO      XCHGP1
000E1D  0630              +         .DBYTE  XCHGP1-1
                                    DO      NXT
000E1F  0283              +         .DBYTE  NXT-1
                            
                            REM:    TSTR    SYNTAX,"RE",'M'
000E21  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000E23  5245CD            +         .BYTE   "RE",('M' | X'80)
                                    DO      IGNORE
000E26  09B3              +         .DBYTE  IGNORE-1
                                    DO      NXT
000E28  0283              +         .DBYTE  NXT-1
                            
                            SYNTAX: DO      ERR
000E2A  021A              +         .DBYTE  ERR-1
                            ERRNUM: CALL    PRNUM
000E2C  8F2A              +         .DBYTE  (PRNUM & X'0FFF) | CALBITH
                                    DO      FIN
000E2E  02A9              +         .DBYTE  FIN-1
                            
                            ; NOTE: EACH RELATIONAL OPERATOR (EQ,  LEQ,  ETC. )  DOES AN
                            ; AUTOMATIC 'RTN' (THIS SAVES VALUABLE BYTES AND TIME)
                            
                            RELEXP: CALL    EXPR
000E30  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    TSTR    REL1,"",'='
000E32  2E39              +         .DBYTE (REL1 & X'0FFF) | TSTBITH
000E34  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    EXPR
000E35  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    DO      EQ
000E37  0543              +         .DBYTE  EQ-1
                            REL1:   TSTR    REL4,"",'<'
000E39  2E4E              +         .DBYTE (REL4 & X'0FFF) | TSTBITH
000E3B  BC                +         .BYTE   "",('<' | X'80)
                                    TSTR    REL2,"",'='
000E3C  2E43              +         .DBYTE (REL2 & X'0FFF) | TSTBITH
000E3E  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    EXPR
000E3F  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    DO      LEQ
000E41  054F              +         .DBYTE  LEQ-1

Portable National Semiconductor SC/MP Assembler [15.02]

                            REL2:   TSTR    REL3,"",'>'
000E43  2E4A              +         .DBYTE (REL3 & X'0FFF) | TSTBITH
000E45  BE                +         .BYTE   "",('>' | X'80)
                                    CALL    EXPR
000E46  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    DO      NEQ
000E48  0547              +         .DBYTE  NEQ-1
                            REL3:   CALL    EXPR
000E4A  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    DO      LSS
000E4C  054B              +         .DBYTE  LSS-1
                            REL4:   TSTR    RETEXP,"",'>'
000E4E  2E86              +         .DBYTE (RETEXP & X'0FFF) | TSTBITH
000E50  BE                +         .BYTE   "",('>' | X'80)
                                    TSTR    REL5,"",'='
000E51  2E58              +         .DBYTE (REL5 & X'0FFF) | TSTBITH
000E53  BD                +         .BYTE   "",('=' | X'80)
                                    CALL    EXPR
000E54  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                                    DO      GEQ
000E56  0557              +         .DBYTE  GEQ-1
                            REL5:   CALL    EXPR
000E58  8E5C              +         .DBYTE  (EXPR & X'0FFF) | CALBITH
                            GTROP:  DO      GTR
000E5A  0553              +         .DBYTE  GTR-1
                            
                            EXPR:   TSTR    EX1,"",'-'
000E5C  2E65              +         .DBYTE (EX1 & X'0FFF) | TSTBITH
000E5E  AD                +         .BYTE   "",('-' | X'80)
                                    CALL    TERM
000E5F  8E88              +         .DBYTE  (TERM & X'0FFF) | CALBITH
                                    DO      NEG
000E61  035A              +         .DBYTE  NEG-1
                                    JUMP    EX3
000E63  4E6A              +         .DBYTE  (EX3 & X'0FFF)| JMPBITH
                            EX1:    TSTR    EX2,"",'+'
000E65  2E68              +         .DBYTE (EX2 & X'0FFF) | TSTBITH
000E67  AB                +         .BYTE   "",('+' | X'80)
                            EX2:    CALL    TERM
000E68  8E88              +         .DBYTE  (TERM & X'0FFF) | CALBITH
                            EX3:    TSTR    EX4,"",'+'
000E6A  2E73              +         .DBYTE (EX4 & X'0FFF) | TSTBITH
000E6C  AB                +         .BYTE   "",('+' | X'80)
                                    CALL    TERM
000E6D  8E88              +         .DBYTE  (TERM & X'0FFF) | CALBITH
                                    DO      ADD
000E6F  032C              +         .DBYTE  ADD-1
                                    JUMP    EX3
000E71  4E6A              +         .DBYTE  (EX3 & X'0FFF)| JMPBITH
                            EX4:    TSTR    EX5,"",'-'
000E73  2E7C              +         .DBYTE (EX5 & X'0FFF) | TSTBITH
000E75  AD                +         .BYTE   "",('-' | X'80)
                                    CALL    TERM
000E76  8E88              +         .DBYTE  (TERM & X'0FFF) | CALBITH

Portable National Semiconductor SC/MP Assembler [15.02]

                                    DO      SUB
000E78  0343              +         .DBYTE  SUB-1
                                    JUMP    EX3
000E7A  4E6A              +         .DBYTE  (EX3 & X'0FFF)| JMPBITH
                            EX5:    TSTR    RETEXP,"O",'R'
000E7C  2E86              +         .DBYTE (RETEXP & X'0FFF) | TSTBITH
000E7E  4FD2              +         .BYTE   "O",('R' | X'80)
                                    CALL    TERM
000E80  8E88              +         .DBYTE  (TERM & X'0FFF) | CALBITH
                                    DO      OROP
000E82  05EB              +         .DBYTE  OROP-1
                                    JUMP    EX3
000E84  4E6A              +         .DBYTE  (EX3 & X'0FFF)| JMPBITH
                            RETEXP: DO      RTN
000E86  00F5              +         .DBYTE  RTN-1
                            
                            TERM:   CALL    FACTOR
000E88  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                            Tl:     TSTR    T2,"",'*'
000E8A  2E93              +         .DBYTE (T2 & X'0FFF) | TSTBITH
000E8C  AA                +         .BYTE   "",('*' | X'80)
                                    CALL    FACTOR
000E8D  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      MUL
000E8F  0371              +         .DBYTE  MUL-1
                                    JUMP    Tl
000E91  4E8A              +         .DBYTE  (Tl & X'0FFF)| JMPBITH
                            T2:     TSTR    T3,"",'/'
000E93  2E9C              +         .DBYTE (T3 & X'0FFF) | TSTBITH
000E95  AF                +         .BYTE   "",('/' | X'80)
                                    CALL    FACTOR
000E96  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      DIV
000E98  0407              +         .DBYTE  DIV-1
                                    JUMP    Tl
000E9A  4E8A              +         .DBYTE  (Tl & X'0FFF)| JMPBITH
                            T3:     TSTR    RETEXP,"AN",'D'
000E9C  2E86              +         .DBYTE (RETEXP & X'0FFF) | TSTBITH
000E9E  414EC4            +         .BYTE   "AN",('D' | X'80)
                                    CALL    FACTOR
000EA1  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      ANDOP
000EA3  05E7              +         .DBYTE  ANDOP-1
                                    JUMP    Tl
000EA5  4E8A              +         .DBYTE  (Tl & X'0FFF)| JMPBITH
                            
                            FACTOR: TSTV    Fl
000EA7  04E0              +         .DBYTE  (TSTVAR-1) & X'0FFF
000EA9  0EAF              +         .DBYTE  Fl
                                    DO      IND
000EAB  052B              +         .DBYTE  IND-1
                                    DO      RTN
000EAD  00F5              +         .DBYTE  RTN-1
                            Fl:     TSTN    F2

Portable National Semiconductor SC/MP Assembler [15.02]

000EAF  06AB              +         .DBYTE  (TSTNUM-1) & X'0FFF
000EB1  0EB5              +         .DBYTE  F2
                                    DO      RTN
000EB3  00F5              +         .DBYTE  RTN-1
                            F2:     TSTR    F3,"",'#'
000EB5  2EBC              +         .DBYTE (F3 & X'0FFF) | TSTBITH
000EB7  A3                +         .BYTE   "",('#' | X'80)
                                    DO      HEX
000EB8  064B              +         .DBYTE  HEX-1
                                    DO      RTN
000EBA  00F5              +         .DBYTE  RTN-1
                            F3:     TSTR    F4,"",'('
000EBC  2EC6              +         .DBYTE (F4 & X'0FFF) | TSTBITH
000EBE  A8                +         .BYTE   "",('(' | X'80)
                                    CALL    RELEXP
000EBF  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"",')'
000EC1  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000EC3  A9                +         .BYTE   "",(')' | X'80)
                                    DO      RTN
000EC4  00F5              +         .DBYTE  RTN-1
                            F4:     TSTR    F5,"",'@'
000EC6  2ECF              +         .DBYTE (F5 & X'0FFF) | TSTBITH
000EC8  C0                +         .BYTE   "",('@' | X'80)
                                    CALL    FACTOR
000EC9  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      EVAL
000ECB  07E4              +         .DBYTE  EVAL-1
                                    DO      RTN
000ECD  00F5              +         .DBYTE  RTN-1
                            F5:     TSTR    F6,"NO",'T'
000ECF  2EDA              +         .DBYTE (F6 & X'0FFF) | TSTBITH
000ED1  4E4FD4            +         .BYTE   "NO",('T' | X'80)
                                    CALL    FACTOR
000ED4  8EA7              +         .DBYTE  (FACTOR & X'0FFF) | CALBITH
                                    DO      NOTOP
000ED6  05EF              +         .DBYTE  NOTOP-1
                                    DO      RTN
000ED8  00F5              +         .DBYTE  RTN-1
                            F6:     TSTR    F7,"STA",'T'
000EDA  2EE4              +         .DBYTE (F7 & X'0FFF) | TSTBITH
000EDC  535441D4          +         .BYTE   "STA",('T' | X'80)
                                    DO      STATUS
000EE0  0950              +         .DBYTE  STATUS-1
                                    DO      RTN
000EE2  00F5              +         .DBYTE  RTN-1
                            F7:     TSTR    F8,"TO",'P'
000EE4  2EEF              +         .DBYTE (F8 & X'0FFF) | TSTBITH
000EE6  544FD0            +         .BYTE   "TO",('P' | X'80)
                                    DO      FNDPGE
000EE9  0B92              +         .DBYTE  FNDPGE-1
                                    DO      TOP
000EEB  098E              +         .DBYTE  TOP-1
                                    DO      RTN

Portable National Semiconductor SC/MP Assembler [15.02]

000EED  00F5              +         .DBYTE  RTN-1
                            F8:     TSTR    F9,"MO",'D'
000EEF  2EFC              +         .DBYTE (F9 & X'0FFF) | TSTBITH
000EF1  4D4FC4            +         .BYTE   "MO",('D' | X'80)
                                    CALL    DOUBLE
000EF4  8F1B              +         .DBYTE  (DOUBLE & X'0FFF) | CALBITH
                                    DO      DIV
000EF6  0407              +         .DBYTE  DIV-1
                                    DO      MODULO
000EF8  09BA              +         .DBYTE  MODULO-1
                                    DO      RTN
000EFA  00F5              +         .DBYTE  RTN-1
                            F9:     TSTR    F10,"RN",'D'
000EFC  2F11              +         .DBYTE (F10 & X'0FFF) | TSTBITH
000EFE  524EC4            +         .BYTE   "RN",('D' | X'80)
                                    CALL    DOUBLE
000F01  8F1B              +         .DBYTE  (DOUBLE & X'0FFF) | CALBITH
                                    DO      RANDOM
000F03  09CC              +         .DBYTE  RANDOM-1
                                    DO      SUB
000F05  0343              +         .DBYTE  SUB-1
                                    DO      ADD
000F07  032C              +         .DBYTE  ADD-1
                                    DO      DIV
000F09  0407              +         .DBYTE  DIV-1
                                    DO      MODULO
000F0B  09BA              +         .DBYTE  MODULO-1
                                    DO      ADD
000F0D  032C              +         .DBYTE  ADD-1
                                    DO      RTN
000F0F  00F5              +         .DBYTE  RTN-1
                            F10:    TSTR    SYNTAX,"PAG",'E'
000F11  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000F13  504147C5          +         .BYTE   "PAG",('E' | X'80)
                                    DO      PUTPGE
000F17  0B75              +         .DBYTE  PUTPGE-1
                                    DO      RTN
000F19  00F5              +         .DBYTE  RTN-1
                            
                            DOUBLE: TSTR    SYNTAX,"",'('
000F1B  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000F1D  A8                +         .BYTE   "",('(' | X'80)
                                    CALL    RELEXP
000F1E  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"",','
000F20  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000F22  AC                +         .BYTE   "",(',' | X'80)
                                    CALL    RELEXP
000F23  8E30              +         .DBYTE  (RELEXP & X'0FFF) | CALBITH
                                    TSTR    SYNTAX,"",')'
000F25  2E2A              +         .DBYTE (SYNTAX & X'0FFF) | TSTBITH
000F27  A9                +         .BYTE   "",(')' | X'80)
                                    DO      RTN
000F28  00F5              +         .DBYTE  RTN-1

Portable National Semiconductor SC/MP Assembler [15.02]

                            
                            PRNUM:  DO      XCHGP1
000F2A  0630              +         .DBYTE  XCHGP1-1
                                    DO      PRN
000F2C  018E              +         .DBYTE  PRN-1
                            PRNUM1: DO      DIV
000F2E  0407              +         .DBYTE  DIV-1
                                    DO      PRN1
000F30  01C5              +         .DBYTE  PRN1-1
                                    DO      XCHGP1
000F32  0630              +         .DBYTE  XCHGP1-1
                                    DO      RTN
000F34  00F5              +         .DBYTE  RTN-1
                            
                            
                            ;*************************************
                            ;*           ERROR MESSAGES          *
                            ;*************************************
                            
                            MESSAGE .MACRO STR,LST
                                    .BYTE   STR
                                    .BYTE   LST |X'80
                                    .ENDM
                            
                            MESGS:  MESSAGE " ERRO",'R'     ;  1
000F36  204552524F        +         .BYTE   " ERRO"
000F3B  D2                +         .BYTE   'R' |X'80
                                    MESSAGE "ARE",'A'       ;  2
000F3C  415245            +         .BYTE   "ARE"
000F3F  C1                +         .BYTE   'A' |X'80
                                    MESSAGE "STM",'T'       ;  3
000F40  53544D            +         .BYTE   "STM"
000F43  D4                +         .BYTE   'T' |X'80
                                    MESSAGE "CHA",'R'       ;  4
000F44  434841            +         .BYTE   "CHA"
000F47  D2                +         .BYTE   'R' |X'80
                                    MESSAGE "SNT",'X'       ;  5
000F48  534E54            +         .BYTE   "SNT"
000F4B  D8                +         .BYTE   'X' |X'80
                                    MESSAGE "VAL",'U'       ;  6
000F4C  56414C            +         .BYTE   "VAL"
000F4F  D5                +         .BYTE   'U' |X'80
                                    MESSAGE "END",'"'       ;  7
000F50  454E44            +         .BYTE   "END"
000F53  A2                +         .BYTE   '"' |X'80
                                    MESSAGE "NOG",'O'       ;  8
000F54  4E4F47            +         .BYTE   "NOG"
000F57  CF                +         .BYTE   'O' |X'80
                                    MESSAGE "RTR",'N'       ;  9
000F58  525452            +         .BYTE   "RTR"
000F5B  CE                +         .BYTE   'N' |X'80
                                    MESSAGE "NES",'T'       ;  10
000F5C  4E4553            +         .BYTE   "NES"
000F5F  D4                +         .BYTE   'T' |X'80

Portable National Semiconductor SC/MP Assembler [15.02]

                                    MESSAGE "NEX",'T'       ;  11
000F60  4E4558            +         .BYTE   "NEX"
000F63  D4                +         .BYTE   'T' |X'80
                                    MESSAGE "FO" ,'R'       ;  12
000F64  464F              +         .BYTE   "FO"
000F66  D2                +         .BYTE   'R' |X'80
                                    MESSAGE "DIV",'0'       ;  13
000F67  444956            +         .BYTE   "DIV"
000F6A  B0                +         .BYTE   '0' |X'80
                                    MESSAGE "BR" ,'K'       ;  14
000F6B  4252              +         .BYTE   "BR"
000F6D  CB                +         .BYTE   'K' |X'80
                                    MESSAGE "UNT",'L'       ;  15
000F6E  554E54            +         .BYTE   "UNT"
000F71  CC                +         .BYTE   'L' |X'80
                                    ;
                                    
                            ;===============================================================================
                            ; I/O Routines
                            ;-------------------------------------------------------------------------------
                            
                                    .IF     EM_SCMP
                                    .INCLUDE "../em-scmp.inc"
                                            .list
                            
                            TXD             .macro
                                            .byte   X'20
                                            .endm
                            
                            RXD             .macro
                                            .byte   X'21
                                            .endm
                            
                            ; Read a character from the terminal using the I/O instructions and filter out
                            ; invalid characters that NIBL does't understand.
                            
                            GECO:
                                    RXD                     ; Use I/O instruction to read a character
000F72  21                +                 .byte   X'21
000F73  01                :         XAE                     ; Save a copy
000F74  40                :         LDE
000F75  9402              :         JP      ASCII           ; ASCII character X'00-X'7F?
000F77  90F9              :         JMP     GECO            ; No, ignore
                                    
000F79  E403              : ASCII:  XRI     X'03            ; Control-C? (Cancel)
000F7B  981D              :         JZ      NOECHO
000F7D  E40B              :         XRI     X'08^X'03       ; Backspace?
000F7F  9817              :         JZ      ECHO
000F81  E405              :         XRI     X'0D^X'08       ; Return?
000F83  9813              :         JZ      ECHO
000F85  E418              :         XRI     X'15^X'0D       ; Control-U? (Erase line)
000F87  9811              :         JZ      NOECHO
000F89  E46A              :         XRI     X'7F^X'15       ; Delete?
000F8B  9808              :         JZ      DELETE

Portable National Semiconductor SC/MP Assembler [15.02]

                                    
000F8D  03                :         SCL                     ; Check if X'20-X'7F
000F8E  40                :         LDE
000F8F  FC20              :         CAI     X'20
000F91  9405              :         JP      ECHO            ; Yes, normal character
000F93  90DD              :         JMP     GECO            ; Otherwise ignore
                            
                            DELETE:
000F95  C408              :         LDI     X'08            ; Change DEL into a backspace
000F97  01                :         XAE                     ; .. and save
                            ECHO:
000F98  40                :         LDE                     ; Recover the character then..
                                    TXD                     ; .. echo to terminal
000F99  20                +                 .byte   X'20
                            NOECHO:
000F9A  40                :         LDE                     ; Recover the character and return without
000F9B  3F                :         XPPC    P3              ; .. echoing
000F9C  90D4              :         JMP     GECO            ; Repeat if recalled
                                    
                            ; Print the character in A to the UART using the extended I/O instruction.
                            
                            PUTC:
000F9E  D47F              :         ANI     X'7F            ; Limit to normal ASCII range
                                    TXD                     ; Use I/O instruction to output
000FA0  20                +                 .byte   X'20
000FA1  3F                :         XPPC    P3              ; And return to caller
000FA2  90FA              :         JMP     PUTC            ; Repeat if recalled
                                    
                            ;===============================================================================
                            ; Original I/O Routines
                            ;-------------------------------------------------------------------------------
                            
                                    .ELSE
                            ;*************************************
                            ;*     GET CHARACTER AND ECHO IT     *
                            ;*************************************
                            
                          - GECO:   LDI     8               ;SET COUNT = 8
                          -         ST      NUM(P2)
                          -         CSA                     ;SET READER RELAY
                          -         ORI     2
                          -         CAS
                          - GETCO1: CSA                     ;WAIT FOR START BIT
                          -         ANI     X'20
                          -         JNZ     GETCO1          ;NOT FOUND
                          -         LDI     87              ; DELAY 1/2 BIT TIME
                          -         DLY     4
                          -         CSA                     ; IS START BIT STILL THERE?
                          -         ANI     X'20
                          -         JNZ     GETCO1          ; NO
                          -         CSA                     ;SEND START BIT
                          -         ANI     X'FD            ; RESET READER RELAY
                          -         ORI     1
                          -         CAS

Portable National Semiconductor SC/MP Assembler [15.02]

                          - GETCO2: LDI     133             ; DELAY 1 BIT TIME
                          -         DLY     8
                          -         CSA                     ;GET BIT (SENSED)
                          -         ANI     X'20
                          -         JZ      GETCO3
                          -         LDI     1
                          -         JMP     GETCO4
                          - GETCO3: LDI     0
                          -         JNZ     GETCO4
                          - GETCO4: ST      TEMP(P2)        ;SAVE BIT VALUE (0 OR 1)
                          -         RRL                     ;ROTATE INTO LINK
                          -         XAE
                          -         SRL                     ; SHIFT INTO CHARACTER
                          -         XAE                     ; RETURN CHAR TO E
                          -         CSA                     ;ECHO BIT TO OUTPUT
                          -         ORI     1
                          -         XOR     TEMP(P2)
                          -         CAS
                          -         DLD     NUM(P2)         ;DECREMENT BIT COUNT
                          -         JNZ     GETCO2          ;LOOP UNTIL 0
                          -         CSA                     ;SET STOP BIT
                          -         ANI     X'FE
                          -         CAS
                          -         DLY     8               ; DELAY APPROX. 1 BIT TIME
                          -         LDE                     ; AC HAS INPUT CHARACTER
                          -         ANI     X'7F
                          -         XAE
                          -         LDE
                          -         XPPC    P3              ;RETURN
                          -         JMP     GECO
                            
                            ;*************************************
                            ;*     PRINT CHARACTER AT TTY        *
                            ;*************************************
                            
                          - PUTC:   XAE
                          -         LDI     255             ; DELAY ALMOST
                          -         DLY     23              ; 3  BIT  TIMES
                          -         CSA                     ;SET OUTPUT  BIT  TO  LOGIC  0
                          -         ORI     1               ; FOR START  BIT
                          -         CAS
                          -         LDI     9               ; INITIALIZE BIT COUNT
                          -         ST      TEMP3(P2)
                          - PUTC1:  LDI     138             ; DELAY 1 BIT TIME
                          -         DLY     8
                          -         DLD     TEMP3(P2)       ; DECREMENT BIT COUNT
                          -         JZ      PUTC2
                          -         LDE                     ; PREPARE NEXT BIT
                          -         ANI     1
                          -         ST      TEMP2(P2)
                          -         XAE
                          -         SR
                          -         XAE
                          -         CSA                     ; SET UP OUTPUT BIT

Portable National Semiconductor SC/MP Assembler [15.02]

                          -         ORI     1
                          -         XOR     TEMP2(P2)
                          -         CAS                     ; PUT BIT INTO TTY
                          -         JMP     PUTC1
                          - PUTC2:  CSA                     ; SET STOP BIT
                          -         ANI     X'FE
                          -         CAS
                          -         XPPC    P3
                          -         JMP     PUTC
                            
                                    .ENDIF
                                    .END


Portable National Semiconductor SC/MP Assembler [15.02]

Symbol Table

ADD                              0000032D  | EREG                             FFFFFF80 
ADOWN                            00000884  | RNDY                             FFFFFFE4 
AESTK                            00001050  | RNDX                             FFFFFFE5 
AMOVE                            0000086E  | RNDF                             FFFFFFE6 
ANDOP                            000005E8  | CHRNUM                           FFFFFFE7 
AON1                             000005F2  | TEMP3                            FFFFFFE8 
AON_0R                           0000060E  | TEMP2                            FFFFFFE9 
AON_NT                           00000620  | TEMP                             FFFFFFEA 
ASCII                            00000F79  | NUM                              FFFFFFEB 
AT                               00000C95  | FAILHI                           FFFFFFEC 
BEGIN                            00000C53  | FAILLO                           FFFFFFED 
BREAK                            00000280  | HIGH                             FFFFFFEE 
CALBIT                           00000080  | LOW                              FFFFFFEF 
CALBITH                          00008000  | P1HIGH                           FFFFFFF0 
CALLML                           00000962  | P1L0W                            FFFFFFF1 
CHEAT                            0000007C  | LABLHI                           FFFFFFF2 
CHEAT1                           000000C0  | LABLLO                           FFFFFFF3 
CHPAGE                           00000BB9  | RUNMOD                           FFFFFFF4 
CHRNUM                           FFFFFFE7  | LISTNG                           FFFFFFF5 
CK1                              00000641  | PAGE                             FFFFFFF6 
CKMODE                           0000063C  | HILINE                           FFFFFFF7 
CLEAR                            00000051  | LOLINE                           FFFFFFF8 
CLEAR1                           00000056  | PCSTK                            FFFFFFF9 
CLR                              00000C5B  | PCHIGH                           FFFFFFFA 
CMP                              0000055A  | PCLOW                            FFFFFFFB 
CMP1                             000005BA  | SBRPTR                           FFFFFFFC 
CMP2                             000005C2  | LSTK                             FFFFFFFD 
CMPR                             000005D1  | FORPTR                           FFFFFFFE 
COMMA                            00000DBC  | DOPTR                            FFFFFFFF 
DELETE                           00000F95  | P0                               00000000 
DETPGE                           00000BC0  | EM_SCMP                          00000001 
DFAULT                           00000C73  | P1                               00000001 
DIV                              00000408  | P2                               00000002 
DOLLAR                           00000D79  | P3                               00000003 
DOLR1                            00000D8A  | TSTBIT                           00000020 
DOLR2                            00000D95  | L000                             0000002A 
DONE                             00000130  | LOOP1                            0000002C 
DONE1                            0000013E  | JMPBIT                           00000040 
DONE2                            0000013F  | L001                             00000043 
DOPTR                            FFFFFFFF  | CLEAR                            00000051 
DOSTAK                           0000107A  | CLEAR1                           00000056 
DOSTMT                           00000CCC  | EXECIL                           00000076 
DOUBLE                           00000F1B  | CHEAT                            0000007C 
E10                              000007C5  | CALBIT                           00000080 
E12                              0000086C  | NOJUMP                           0000009B 
E12A                             000008E0  | ILCALL                           0000009E 
E13                              0000090F  | ILC1                             000000A8 
E14                              0000094F  | CHEAT1                           000000C0 
E15                              0000097B  | TST                              000000C2 
E16                              000009CB  | SCAN                             000000C4 
E16A                             00000A2D  | LOOP2                            000000D6 
E17                              00000A49  | XO                               000000E7 

Portable National Semiconductor SC/MP Assembler [15.02]

E18                              00000AA6  | LNEQ                             000000E9 
E19                              00000B03  | RTN                              000000F6 
E2                               000001C4  | EOA                              00000108 
E3A                              00000282  | SAV                              0000010A 
E4                               000002D7  | SAV1                             00000126 
E5                               00000304  | SAV2                             0000012C 
E6                               00000370  | DONE                             00000130 
E6A                              000003CA  | DONE1                            0000013E 
E8                               00000643  | DONE2                            0000013F 
E8B                              000006AA  | RSTR                             00000143 
E9                               00000753  | EO                               0000014B 
ECHO                             00000F98  | RSTR1                            0000014D 
EM_SCMP                          00000001  | XI                               0000015D 
END                              00000E04  | RSTR2                            0000015F 
EO                               0000014B  | XFER                             00000169 
EOA                              00000108  | XFER1                            00000171 
EQ                               00000544  | PRS                              00000176 
EREG                             FFFFFF80  | PRS1                             0000018B 
ERR                              0000021B  | El                               0000018D 
ERR1                             0000021D  | PRN                              0000018F 
ERR2                             0000021F  | LPNOS                            000001BE 
ERRNUM                           00000E2C  | X4                               000001C2 
ESA                              000006DD  | E2                               000001C4 
EVAL                             000007E5  | PRN1                             000001C6 
EX1                              00000E65  | QPRNT                            000001E7 
EX2                              00000E68  | QPRNT2                           000001F7 
EX3                              00000E6A  | LOOP3                            000001FB 
EX4                              00000E73  | NLINE                            0000020D 
EX5                              00000E7C  | X5                               00000219 
EXECIL                           00000076  | ERR                              0000021B 
EXPR                             00000E5C  | ERR1                             0000021D 
El                               0000018D  | ERR2                             0000021F 
Ell                              0000081D  | QQ1                              00000235 
F10                              00000F11  | LOOP4                            00000239 
F2                               00000EB5  | QQMSG                            0000023F 
F3                               00000EBC  | QQ2                              00000252 
F4                               00000EC6  | QQ3                              00000259 
F5                               00000ECF  | X5A                              0000027E 
F6                               00000EDA  | BREAK                            00000280 
F7                               00000EE4  | E3A                              00000282 
F8                               00000EEF  | NXT                              00000284 
F9                               00000EFC  | NXT1                             000002A1 
FACTOR                           00000EA7  | FIN                              000002AA 
FAIL                             000005D9  | STRT                             000002C0 
FAILHI                           FFFFFFEC  | X6                               000002D5 
FAILLO                           FFFFFFED  | E4                               000002D7 
FALSE1                           000005C0  | LST                              000002D9 
FIN                              000002AA  | LST2                             000002F7 
FLBL1                            00000BE3  | X6A                              00000302 
FLBL2                            00000BFB  | E5                               00000304 
FLBL3                            00000C10  | LST3                             00000306 
FNDLBL                           00000BDD  | LST4                             0000030C 
FNDPGE                           00000B93  | LST5                             0000031C 
FOR                              00000D25  | ADD                              0000032D 

Portable National Semiconductor SC/MP Assembler [15.02]

FOR2                             00000D47  | X7                               00000342 
FORI                             00000D45  | SUB                              00000344 
FORPTR                           FFFFFFFE  | NEG                              0000035B 
FORSTK                           0000108A  | X8                               0000036E 
FPGE1                            00000BA2  | E6                               00000370 
Fl                               00000EAF  | MUL                              00000372 
GECO                             00000F72  | MM1                              0000038F 
GENTR                            000007B5  | MM2                              000003A0 
GEQ                              00000558  | LOOP5                            000003AE 
GEQ1                             000005B6  | E6A                              000003CA 
GETL                             00000757  | MM3                              000003CC 
GETL0                            00000773  | X9                               000003E7 
GETL1                            00000776  | MM4                              000003E9 
GETLCR                           000007D7  | MMEXIT                           000003FA 
GETRUB                           000007CD  | DIV                              00000408 
GOSUB                            00000CE6  | QD0                              00000418 
GOTO                             00000CD8  | X9A                              00000431 
GTR                              00000554  | QDPOS                            00000433 
GTR1                             000005AB  | QD1                              0000043B 
GTROP                            00000E5A  | QD2                              0000044C 
GXH                              000007C7  | LOOP6                            00000458 
GXU                              000007A5  | X9B                              0000049C 
HEND                             000006A4  | QDENT1                           0000049E 
HENTER                           00000683  | QD3                              000004A4 
HEX                              0000064C  | QDEND                            000004BB 
HIGH                             FFFFFFEE  | STORE                            000004C1 
HILINE                           FFFFFFF7  | X10                              000004DA 
HLETR                            00000674  | TSTVAR                           000004E1 
HSHIFT                           0000068A  | TV_FAIL                          000004F3 
HSKIP                            0000065C  | TVMAYBE                          00000505 
HX0K                             00000680  | TV_OK                            00000512 
IF                               00000CA5  | IND                              0000052C 
IF1                              00000CB1  | XI1                              00000542 
IGNORE                           000009B4  | EQ                               00000544 
ILC1                             000000A8  | NEQ                              00000548 
ILCALL                           0000009E  | LSS                              0000054C 
IN1                              00000DDD  | LEQ                              00000550 
IN2                              00000DF1  | GTR                              00000554 
IN3                              00000E00  | GEQ                              00000558 
IND                              0000052C  | CMP                              0000055A 
INPST2                           00000B27  | SETZ                             00000585 
INPUT                            00000DCC  | X12                              0000058F 
INSAD0                           000008E2  | NEQ1                             00000591 
INSAD1                           000008FE  | LSS1                             0000059A 
INSRT                            0000081F  | LEQ1                             000005A2 
INSRT1                           00000837  | GTR1                             000005AB 
INSRT2                           00000841  | GEQ1                             000005B6 
INSRT3                           00000849  | CMP1                             000005BA 
INSRT4                           00000856  | FALSE1                           000005C0 
INSRT5                           0000085D  | CMP2                             000005C2 
INSUP0                           00000894  | CMPR                             000005D1 
INSUP1                           000008A0  | FAIL                             000005D9 
INSUP2                           000008C1  | X12A                             000005E6 
INSUP3                           000008C3  | ANDOP                            000005E8 

Portable National Semiconductor SC/MP Assembler [15.02]

INSUP4                           000008D3  | OROP                             000005EC 
ISTRNG                           00000B21  | NOTOP                            000005F0 
JMPBIT                           00000040  | AON1                             000005F2 
JMPBITH                          00004000  | AON_0R                           0000060E 
L000                             0000002A  | AON_NT                           00000620 
L001                             00000043  | X12B                             0000062F 
LABLHI                           FFFFFFF2  | XCHGP1                           00000631 
LABLLO                           FFFFFFF3  | CKMODE                           0000063C 
LBUF                             000010D6  | CK1                              00000641 
LEQ                              00000550  | E8                               00000643 
LEQ1                             000005A2  | HEX                              0000064C 
LET                              00000C86  | HSKIP                            0000065C 
LIST                             00000C30  | LOOP7                            00000664 
LIST1                            00000C42  | X12C                             00000672 
LIST2                            00000C44  | HLETR                            00000674 
LIST3                            00000C46  | HX0K                             00000680 
LISTNG                           FFFFFFF5  | HENTER                           00000683 
LIT1                             00000A2F  | HSHIFT                           0000068A 
LNEQ                             000000E9  | HEND                             000006A4 
LOLINE                           FFFFFFF8  | E8B                              000006AA 
LOOP1                            0000002C  | TSTNUM                           000006AC 
LOOP10                           00000AD0  | TNABRT                           000006BE 
LOOP11                           00000B37  | TNRET                            000006CE 
LOOP12                           00000B67  | X13                              000006DB 
LOOP13                           00000BA9  | ESA                              000006DD 
LOOP2                            000000D6  | TNL1                             000006DF 
LOOP3                            000001FB  | LOOP8                            000006EF 
LOOP4                            00000239  | TNL2                             000006FF 
LOOP5                            000003AE  | TNSHFT                           0000070C 
LOOP6                            00000458  | TNERR                            00000751 
LOOP7                            00000664  | E9                               00000753 
LOOP8                            000006EF  | X14                              00000755 
LOOP9                            000009D8  | GETL                             00000757 
LOW                              FFFFFFEF  | GETL0                            00000773 
LPNOS                            000001BE  | GETL1                            00000776 
LSS                              0000054C  | GXU                              000007A5 
LSS1                             0000059A  | X15                              000007B3 
LST                              000002D9  | GENTR                            000007B5 
LST2                             000002F7  | E10                              000007C5 
LST3                             00000306  | GXH                              000007C7 
LST4                             0000030C  | GETRUB                           000007CD 
LST5                             0000031C  | GETLCR                           000007D7 
LSTK                             FFFFFFFD  | X16                              000007E3 
MESGS                            00000F36  | EVAL                             000007E5 
ML                               00000E0D  | MOVE                             00000803 
MM1                              0000038F  | X17                              0000081B 
MM2                              000003A0  | Ell                              0000081D 
MM3                              000003CC  | INSRT                            0000081F 
MM4                              000003E9  | INSRT1                           00000837 
MMEXIT                           000003FA  | INSRT2                           00000841 
MODULO                           000009BB  | INSRT3                           00000849 
MOVE                             00000803  | INSRT4                           00000856 
MOVESR                           00000948  | INSRT5                           0000085D 
MOVSTR                           00000B51  | X19                              0000086A 

Portable National Semiconductor SC/MP Assembler [15.02]

MUL                              00000372  | E12                              0000086C 
NEG                              0000035B  | AMOVE                            0000086E 
NEQ                              00000548  | ADOWN                            00000884 
NEQ1                             00000591  | INSUP0                           00000894 
NEW                              00000C68  | INSUP1                           000008A0 
NEW1                             00000C75  | INSUP2                           000008C1 
NEWPGM                           00000BCC  | INSUP3                           000008C3 
NEXT                             00000D0B  | INSUP4                           000008D3 
NEXTV                            00000A84  | E12A                             000008E0 
NEXTV1                           00000AE9  | INSAD0                           000008E2 
NLINE                            0000020D  | X19A                             000008E4 
NOECHO                           00000F9A  | INSAD1                           000008FE 
NOJUMP                           0000009B  | X20                              00000908 
NOTOP                            000005F0  | E13                              0000090F 
NUM                              FFFFFFEB  | POPAE                            00000911 
NUPAGE                           00000B88  | UNTIL                            00000923 
NUPGE0                           00000B90  | UNTL1                            0000092F 
NXT                              00000284  | SREDO                            0000093B 
NXT1                             000002A1  | MOVESR                           00000948 
NXTV10                           00000AA8  | X21                              0000094D 
NXTV2                            00000ADC  | E14                              0000094F 
NXTV3                            00000ADE  | STATUS                           00000951 
OROP                             000005EC  | CALLML                           00000962 
P0                               00000000  | SAVEDO                           00000973 
P1                               00000001  | E15                              0000097B 
P1HIGH                           FFFFFFF0  | SVDO1                            0000097D 
P1L0W                            FFFFFFF1  | X22                              0000098D 
P2                               00000002  | TOP                              0000098F 
P3                               00000003  | TOP0                             00000995 
PAGE                             FFFFFFF6  | TOP1                             0000099B 
PCHIGH                           FFFFFFFA  | TOP2                             000009A2 
PCLOW                            FFFFFFFB  | IGNORE                           000009B4 
PCSTAK                           000010A6  | MODULO                           000009BB 
PCSTK                            FFFFFFF9  | X23                              000009C9 
PGE                              00000D62  | E16                              000009CB 
PGM                              00001120  | RANDOM                           000009CD 
POPAE                            00000911  | LOOP9                            000009D8 
PR1                              00000DA2  | RND1                             000009FC 
PR2                              00000DA9  | X24                              00000A2B 
PR3                              00000DB8  | E16A                             00000A2D 
PR4                              00000DC1  | LIT1                             00000A2F 
PR5                              00000DC6  | SAVFOR                           00000A41 
PR6                              00000DC8  | E17                              00000A49 
PRINT                            00000D99  | SFOR1                            00000A4B 
PRMPT1                           00000C20  | X25                              00000A82 
PRN                              0000018F  | NEXTV                            00000A84 
PRN1                             000001C6  | QNXTV1                           00000A8E 
PRNUM                            00000F2A  | E18                              00000AA6 
PRNUM1                           00000F2E  | NXTV10                           00000AA8 
PROMPT                           00000C19  | LOOP10                           00000AD0 
PRS                              00000176  | NXTV2                            00000ADC 
PRS1                             0000018B  | NXTV3                            00000ADE 
PRSTR1                           00000B11  | X26                              00000AE7 
PSTRNG                           00000B05  | NEXTV1                           00000AE9 

Portable National Semiconductor SC/MP Assembler [15.02]

PTSTR1                           00000B45  | X_REDO                           00000AF5 
PUTC                             00000F9E  | E19                              00000B03 
PUTPGE                           00000B76  | PSTRNG                           00000B05 
PUTSTR                           00000B31  | PRSTR1                           00000B11 
QD0                              00000418  | ISTRNG                           00000B21 
QD1                              0000043B  | INPST2                           00000B27 
QD2                              0000044C  | X27                              00000B2F 
QD3                              000004A4  | PUTSTR                           00000B31 
QDEND                            000004BB  | LOOP11                           00000B37 
QDENT1                           0000049E  | PTSTR1                           00000B45 
QDPOS                            00000433  | STREND                           00000B4B 
QNXTV1                           00000A8E  | MOVSTR                           00000B51 
QPRNT                            000001E7  | LOOP12                           00000B67 
QPRNT2                           000001F7  | PUTPGE                           00000B76 
QQ1                              00000235  | NUPAGE                           00000B88 
QQ2                              00000252  | NUPGE0                           00000B90 
QQ3                              00000259  | FNDPGE                           00000B93 
QQMSG                            0000023F  | FPGE1                            00000BA2 
RANDOM                           000009CD  | LOOP13                           00000BA9 
REL1                             00000E39  | CHPAGE                           00000BB9 
REL2                             00000E43  | DETPGE                           00000BC0 
REL3                             00000E4A  | NEWPGM                           00000BCC 
REL4                             00000E4E  | FNDLBL                           00000BDD 
REL5                             00000E58  | FLBL1                            00000BE3 
RELEXP                           00000E30  | FLBL2                            00000BFB 
REM                              00000E21  | FLBL3                            00000C10 
RETEXP                           00000E86  | START                            00000C17 
RETURN                           00000CFB  | PROMPT                           00000C19 
RND1                             000009FC  | PRMPT1                           00000C20 
RNDF                             FFFFFFE6  | LIST                             00000C30 
RNDX                             FFFFFFE5  | LIST1                            00000C42 
RNDY                             FFFFFFE4  | LIST2                            00000C44 
RSTR                             00000143  | LIST3                            00000C46 
RSTR1                            0000014D  | RUN                              00000C4C 
RSTR2                            0000015F  | BEGIN                            00000C53 
RTN                              000000F6  | CLR                              00000C5B 
RUN                              00000C4C  | NEW                              00000C68 
RUNMOD                           FFFFFFF4  | DFAULT                           00000C73 
SAV                              0000010A  | NEW1                             00000C75 
SAV1                             00000126  | STMT                             00000C81 
SAV2                             0000012C  | LET                              00000C86 
SAVEDO                           00000973  | AT                               00000C95 
SAVFOR                           00000A41  | IF                               00000CA5 
SBRPTR                           FFFFFFFC  | IF1                              00000CB1 
SBRSTK                           0000106A  | UNT                              00000CB7 
SCAN                             000000C4  | DOSTMT                           00000CCC 
SETZ                             00000585  | GOTO                             00000CD8 
SFOR1                            00000A4B  | GOSUB                            00000CE6 
SREDO                            0000093B  | TBL001                           00000CF1 
START                            00000C17  | RETURN                           00000CFB 
STAT                             00000D4F  | NEXT                             00000D0B 
STATUS                           00000951  | FOR                              00000D25 
STMT                             00000C81  | FORI                             00000D45 
STORE                            000004C1  | FOR2                             00000D47 

Portable National Semiconductor SC/MP Assembler [15.02]

STREND                           00000B4B  | STAT                             00000D4F 
STRT                             000002C0  | PGE                              00000D62 
SUB                              00000344  | DOLLAR                           00000D79 
SVDO1                            0000097D  | DOLR1                            00000D8A 
SYNTAX                           00000E2A  | DOLR2                            00000D95 
T2                               00000E93  | PRINT                            00000D99 
T3                               00000E9C  | PR1                              00000DA2 
TBL001                           00000CF1  | PR2                              00000DA9 
TEMP                             FFFFFFEA  | PR3                              00000DB8 
TEMP2                            FFFFFFE9  | COMMA                            00000DBC 
TEMP3                            FFFFFFE8  | PR4                              00000DC1 
TERM                             00000E88  | PR5                              00000DC6 
TNABRT                           000006BE  | PR6                              00000DC8 
TNERR                            00000751  | INPUT                            00000DCC 
TNL1                             000006DF  | IN1                              00000DDD 
TNL2                             000006FF  | IN2                              00000DF1 
TNRET                            000006CE  | IN3                              00000E00 
TNSHFT                           0000070C  | END                              00000E04 
TOP                              0000098F  | ML                               00000E0D 
TOP0                             00000995  | REM                              00000E21 
TOP1                             0000099B  | SYNTAX                           00000E2A 
TOP2                             000009A2  | ERRNUM                           00000E2C 
TST                              000000C2  | RELEXP                           00000E30 
TSTBIT                           00000020  | REL1                             00000E39 
TSTBITH                          00002000  | REL2                             00000E43 
TSTNUM                           000006AC  | REL3                             00000E4A 
TSTVAR                           000004E1  | REL4                             00000E4E 
TVMAYBE                          00000505  | REL5                             00000E58 
TV_FAIL                          000004F3  | GTROP                            00000E5A 
TV_OK                            00000512  | EXPR                             00000E5C 
Tl                               00000E8A  | EX1                              00000E65 
UNT                              00000CB7  | EX2                              00000E68 
UNTIL                            00000923  | EX3                              00000E6A 
UNTL1                            0000092F  | EX4                              00000E73 
VARS                             0000101C  | EX5                              00000E7C 
X10                              000004DA  | RETEXP                           00000E86 
X12                              0000058F  | TERM                             00000E88 
X12A                             000005E6  | Tl                               00000E8A 
X12B                             0000062F  | T2                               00000E93 
X12C                             00000672  | T3                               00000E9C 
X13                              000006DB  | FACTOR                           00000EA7 
X14                              00000755  | Fl                               00000EAF 
X15                              000007B3  | F2                               00000EB5 
X16                              000007E3  | F3                               00000EBC 
X17                              0000081B  | F4                               00000EC6 
X19                              0000086A  | F5                               00000ECF 
X19A                             000008E4  | F6                               00000EDA 
X20                              00000908  | F7                               00000EE4 
X21                              0000094D  | F8                               00000EEF 
X22                              0000098D  | F9                               00000EFC 
X23                              000009C9  | F10                              00000F11 
X24                              00000A2B  | DOUBLE                           00000F1B 
X25                              00000A82  | PRNUM                            00000F2A 
X26                              00000AE7  | PRNUM1                           00000F2E 

Portable National Semiconductor SC/MP Assembler [15.02]

X27                              00000B2F  | MESGS                            00000F36 
X4                               000001C2  | GECO                             00000F72 
X5                               00000219  | ASCII                            00000F79 
X5A                              0000027E  | DELETE                           00000F95 
X6                               000002D5  | ECHO                             00000F98 
X6A                              00000302  | NOECHO                           00000F9A 
X7                               00000342  | PUTC                             00000F9E 
X8                               0000036E  | VARS                             0000101C 
X9                               000003E7  | AESTK                            00001050 
X9A                              00000431  | SBRSTK                           0000106A 
X9B                              0000049C  | DOSTAK                           0000107A 
XCHGP1                           00000631  | FORSTK                           0000108A 
XFER                             00000169  | PCSTAK                           000010A6 
XFER1                            00000171  | LBUF                             000010D6 
XI                               0000015D  | PGM                              00001120 
XI1                              00000542  | TSTBITH                          00002000 
XO                               000000E7  | JMPBITH                          00004000 
X_REDO                           00000AF5  | CALBITH                          00008000 
